{"version":3,"file":"static/js/9670.fcc38afd.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/LatestVideos/LatestVideosGallery.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\nimport type { CardGame } from \"../../services/sharedDefintion\";\nconst CardDialog = lazy(() => import(\"./CardDialog\"));\n\nfunction CardEntry(props : {\n    game: CardGame;\n    [key: string | number | symbol] : any;\n}) {\n\n    // hooks\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n    const is_mobile_device = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    return (\n        <Card sx={{ position: \"relative\" }}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                sx={{ height: \"inherit\", zIndex: 1 }}\n            >\n                <CardMedia\n                    sx={{ zIndex: 1 }}\n                    title={gameTitle}\n                >\n                    <Image \n                        src={game.imagePath}\n                        srcSet={game.srcSet}\n                        sizes={game.sizes}\n                        alt={gameTitle}\n                        loading={\"lazy\"}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </Card>\n    );\n}\n\nexport default CardEntry;","import { useEffect } from \"react\";\nimport Grid from \"@mui/material/Grid\";\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\nimport CardEntry from \"../GamesView/CardEntry\";\n\n// Redux\nimport { fetchLatestVideos, selectLatestVideos } from \"../../services/latestVideosSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// The gallery component\nfunction LatestVideosGallery(_props : {[key: string | number | symbol] : any}) {\n\n    const dispatch = useAppDispatch();\n    const {\n        loading,\n        error,\n        items : data\n    } = useAppSelector( (state) => selectLatestVideos(state));\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchLatestVideos());\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchLatestVideos());}}\n            component={\n                <div>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.videoId} \n                                            item \n                                            xs={12}\n                                            sm={6}\n                                            md={3}\n                                            // 5 items for this screen size\n                                            lg={2.4}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </div>\n            }\n        />\n    );\n}\n\nexport default LatestVideosGallery;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n"],"names":["CardDialog","lazy","props","navigate","useNavigate","game","is_mobile_device","useMediaQuery","theme","breakpoints","down","_useState","useState","_useState2","_slicedToArray","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","_jsxs","Card","sx","position","children","_jsx","CardActionArea","onClick","window","location","href","onContextMenu","event","preventDefault","height","zIndex","CardMedia","Image","src","imagePath","srcSet","sizes","alt","loading","disableSpinner","Suspense","fallback","contextMenuState","_props","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","selectLatestVideos","error","data","items","useEffect","fetchLatestVideos","ReloadWrapper","reloadFct","component","Grid","container","spacing","style","rowGap","map","item","xs","sm","md","lg","CardEntry","videoId","CircularProgress","Fab","AutorenewIcon","CenteredGrid","t","useTranslation","_Fragment","variant","size","color"],"sourceRoot":""}