{"version":3,"file":"static/js/670.8f559be9.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/LatestVideos/LatestVideosGallery.tsx","components/Others/CenteredGrid.tsx","components/Others/CustomSnackbar.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import React, {Suspense} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\n// To check what should happen when clicking on a game\nimport { useTheme, styled } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\nimport Skeleton from '@mui/material/Skeleton';\n\nimport Tooltip from '@mui/material/Tooltip';\nimport Image from '@jy95/material-ui-image';\n// @ts-ignore\nconst CardDialog = React.lazy(() => import(\"./CardDialog.tsx\"));\n\nconst PREFIX = 'CardEntry';\n\nconst classes = {\n    gameRoot: `${PREFIX}-gameRoot`,\n    gameCover: `${PREFIX}-gameCover`,\n    MuiCardActionArea: `${PREFIX}-MuiCardActionArea`\n};\n\nconst StyledCard = styled(Card)((\n    {\n        theme\n    }\n) => ({\n    [`&.${classes.gameRoot}`]: {\n        position: \"relative\",\n        //height: \"100%\"\n    },\n    [`& .${classes.gameCover}`]: {\n        zIndex: 1,\n        //height: \"inherit\"\n    },\n    [`& .${classes.MuiCardActionArea}`]: {\n        height: \"inherit\",\n        zIndex: 1\n    }\n}));\n\n// for responsive pictures\nconst PICTURE_SIZES = [\"small\", \"medium\", \"big\"];\nconst SIZES_WITDH = {\n    \"small\": \"150w\",\n    \"medium\": \"200w\",\n    \"big\": \"250w\"\n}\n\nfunction CardEntry(props) {\n\n    // hooks\n    const theme = useTheme();\n    const { t } = useTranslation('common');\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n\n    const is_mobile_device = useMediaQuery(theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = React.useState(false);\n    \n    // labels\n    const LABEL_WATCH_ON_YT = \"gamesLibrary.actionsButton.watchOnYt\";\n    const LABEL_WATCH_HERE = \"gamesLibrary.actionsButton.watchHere\";\n\n    // consts\n    const label_for_game = (is_mobile_device) ? LABEL_WATCH_ON_YT : LABEL_WATCH_HERE;\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.playlistId : \"/video/\" + game.videoId;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    // image properties\n    let imageProps : {\n        src: string,\n        alt: string,\n        srcSet?: string\n    } = {\n        src: game.imagePath,\n        alt: gameTitle\n    };\n\n    // only \n    if (game?.hasResponsiveImages) {\n        // TODO maybe in the future make that stuff more configurable\n        imageProps.srcSet= PICTURE_SIZES\n            .map(size=>`${game.imagesFolder}/cover@${size}.webp ${SIZES_WITDH[size]}`)\n            .join(\",\");\n    }\n\n    return (\n        <StyledCard className={classes.gameRoot}>\n\n            <Tooltip title={t(label_for_game, { \"gameName\": gameTitle})} aria-label=\"WatchGame\">\n                <CardActionArea \n                    onClick={watchGame}\n                    onContextMenu={(event) => {\n                        event.preventDefault();\n                        setContextMenuOpen(true);\n                    }}\n                    classes={{root: classes.MuiCardActionArea}}\n                >\n                    <CardMedia\n                        className={classes.gameCover}\n                        title={gameTitle}\n                    >\n                        <Image \n                            {...imageProps}\n                            //disableSpinner={true} \n                            loading={<Skeleton variant=\"rectangular\" />}\n                        />\n                    </CardMedia>\n\n                </CardActionArea>\n            </Tooltip>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </StyledCard>\n    );\n}\n\nexport default CardEntry;","import React from \"react\";\nimport { styled } from '@mui/material/styles';\nimport {connect} from 'react-redux';\n// @ts-ignore\nimport {get_latest_videos} from \"../../actions/latestVideos.tsx\";\n\n// Custom\n// @ts-ignore\nimport ReloadWrapper from \"../Others/ReloadWrapper.tsx\";\n\n// Style\nimport Grid from \"@mui/material/Grid\";\n// @ts-ignore\nimport CardEntry from \"../GamesView/CardEntry.tsx\";\n\nconst PREFIX = 'LatestVideosGallery';\n\nconst classes = {\n    gameEntry: `${PREFIX}-gameEntry`,\n    gamesCriteria: `${PREFIX}-gamesCriteria`\n};\n\nconst StyledLatestVideosGallery = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.gameEntry}`]: {\n        [theme.breakpoints.only('xs')]: {\n            flexBasis: \"calc((100% / 1) - 1%)\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            flexBasis: \"calc((100% / 2) - 1%)\"\n        },\n        [theme.breakpoints.only('md')]: {\n            flexBasis: \"calc((100% / 4) - 1%)\"\n        },\n        [theme.breakpoints.up('lg')]: {\n            flexBasis: \"calc((100% / 5) - 1%)\"\n        },\n    },\n    [`& .${classes.gamesCriteria}`]: {\n        display: \"flex\",\n        [theme.breakpoints.down('md')]: {\n            flexDirection: \"column\",\n            rowGap: \"8px\"\n        },\n        [theme.breakpoints.up('md')]: {\n            flexDirection: \"row\",\n            justifyContent: \"flex-end\"\n        }\n    }\n}));\n\n// The gallery component\nfunction LatestVideosGallery(props) {\n\n    const {loading, error, data} = props;\n\n    // on mount, load data (only once)\n    React.useEffect(() => {\n        props.get_latest_videos();\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {props.get_latest_videos();}}\n            component={\n                <StyledLatestVideosGallery>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.playlistId ?? game.videoId} \n                                            item \n                                            className={classes.gameEntry}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </StyledLatestVideosGallery>            \n            }\n        />\n    );\n}\n\n// mapStateToProps(state, ownProps)\nconst mapStateToProps = state => ({\n    data: state.latestVideos.items\n});\n\nconst mapDispatchToProps = {\n    get_latest_videos\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LatestVideosGallery);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from \"@mui/material/Grid\";\n\nfunction CenteredBox(props) {\n    const {children} = props;\n    return (\n        <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            style={{minHeight: '80vh'}}\n        >\n            {children}\n        </Grid>\n    );\n}\n\nCenteredBox.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default CenteredBox;","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { cx } from '@emotion/css';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport InfoIcon from '@mui/icons-material/Info';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { amber, green } from '@mui/material/colors';\nimport IconButton from '@mui/material/IconButton';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport Snackbar from '@mui/material/Snackbar';\nimport SnackbarContent from '@mui/material/SnackbarContent';\n\n\nconst PREFIX = 'CustomizedSnackbar';\n\nconst classes = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    info: `${PREFIX}-info`,\n    warning: `${PREFIX}-warning`,\n    icon: `${PREFIX}-icon`,\n    iconVariant: `${PREFIX}-iconVariant`,\n    message: `${PREFIX}-message`\n};\n\nconst StyledSnackbar = styled(Snackbar)((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.success}`]: {\n        backgroundColor: green[600],\n    },\n    [`& .${classes.error}`]: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    [`& .${classes.info}`]: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    [`& .${classes.warning}`]: {\n        backgroundColor: amber[700],\n    },\n    [`& .${classes.icon}`]: {\n        fontSize: 20,\n    },\n    [`& .${classes.iconVariant}`]: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    [`& .${classes.message}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    [`& .${classes.success}`]: {\n        backgroundColor: green[600],\n    },\n    [`& .${classes.error}`]: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    [`& .${classes.info}`]: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    [`& .${classes.warning}`]: {\n        backgroundColor: amber[700],\n    },\n    [`& .${classes.icon}`]: {\n        fontSize: 20,\n    },\n    [`& .${classes.iconVariant}`]: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    [`& .${classes.message}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    }\n}));\n\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nfunction CustomSnackbar(props) {\n\n    const { className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={cx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={cx(classes.icon, classes.iconVariant)} />\n                    {message}\n        </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={onClose}\n                    size=\"large\">\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nCustomSnackbar.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\nfunction CustomizedSnackbar(props) {\n    const [open, setOpen] = React.useState(true);\n    const {variant, message} = props;\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <StyledSnackbar\n            open={open}\n            autoHideDuration={5000}\n            onClose={handleClose}\n        >\n            <CustomSnackbar\n                onClose={handleClose}\n                variant={variant}\n                message={message}\n            />\n        </StyledSnackbar>\n    );\n}\n\nCustomizedSnackbar.propTypes = {\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n    message: PropTypes.string.isRequired,\n};\n\nexport default CustomizedSnackbar;","import React from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {connect} from 'react-redux';\n\n// Icons\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Fab from '@mui/material/Fab';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\n\n// Custom\n// @ts-ignore\nimport CenteredGrid from \"./CenteredGrid.tsx\";\n// @ts-ignore\nimport SnackbarWrapper from \"./CustomSnackbar.tsx\";\n\n// The reload wrapper component\nfunction ReloadWrapper(props) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    if (loading) {\n        return <CenteredGrid>\n            <CircularProgress/>\n        </CenteredGrid>\n    }\n\n    if (error) {\n        return <>\n            <SnackbarWrapper\n                variant={\"error\"}\n                message={error}\n            />\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>;\n    }\n    \n    return component;\n}\n\n// mapStateToProps(state, ownProps)\nconst mapStateToProps = _state => ({});\nconst mapDispatchToProps = {};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ReloadWrapper);\n"],"names":["CardDialog","React","PREFIX","classes","gameRoot","gameCover","MuiCardActionArea","StyledCard","styled","Card","theme","position","zIndex","height","PICTURE_SIZES","SIZES_WITDH","props","useTheme","t","useTranslation","navigate","useNavigate","game","is_mobile_device","useMediaQuery","breakpoints","down","contextMenuOpen","setContextMenuOpen","label_for_game","gameTitle","title","gameURL","url","local_path","url_type","playlistId","videoId","imageProps","src","imagePath","alt","hasResponsiveImages","srcSet","map","size","imagesFolder","join","className","onClick","window","location","href","onContextMenu","event","preventDefault","root","loading","variant","Suspense","fallback","contextMenuState","gameEntry","gamesCriteria","StyledLatestVideosGallery","only","flexBasis","up","display","flexDirection","rowGap","justifyContent","mapDispatchToProps","get_latest_videos","connect","state","data","latestVideos","items","error","reloadFct","component","container","spacing","style","item","children","Grid","direction","alignItems","minHeight","success","info","warning","icon","iconVariant","message","StyledSnackbar","Snackbar","backgroundColor","green","palette","dark","primary","main","amber","fontSize","opacity","marginRight","variantIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","CustomSnackbar","onClose","other","Icon","SnackbarContent","cx","id","action","IconButton","color","Close","open","setOpen","handleClose","reason","autoHideDuration","_state","CenteredGrid","CircularProgress","Fab","Autorenew"],"sourceRoot":""}