{"version":3,"file":"static/js/1621.d0d1d826.chunk.js","mappings":"uNAWMA,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,0BAAN,IAiExB,IA/DA,SAAmBC,GAMf,IAAMC,GAAWC,EAAAA,EAAAA,MAGVC,EAAQH,EAARG,KACDC,GAAmBC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAiBA,EAAMC,YAAYC,KAAK,KAAxC,IAGxC,GAA6CC,EAAAA,EAAAA,WAAS,GAAtD,eAAOC,EAAP,KAAuBC,EAAvB,KAIWC,EAEPT,EAFAU,MACKC,EACLX,EADAY,IAEEC,EAA+B,aAAlBb,EAAKc,SAA0B,aAAed,EAAKe,GAAK,UAAYf,EAAKe,GAU5F,OACI,UAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,YAAtB,WAEI,SAAC,IAAD,CACIC,QAZZ,WACQjB,EACAkB,OAAOC,SAASC,KAAOV,EAEvBb,EAASe,EAEhB,EAOWS,cAAe,SAACC,GACZA,EAAMC,iBACNhB,GAAmB,EACtB,EACDQ,GAAI,CAAES,OAAQ,UAAWC,OAAQ,GANrC,UAQI,SAAC,IAAD,CACIV,GAAI,CAAEU,OAAQ,GACdhB,MAAOD,EAFX,UAII,SAAC,IAAD,CACIkB,IAAK3B,EAAK4B,UACVC,OAAQ7B,EAAK6B,OACbC,MAAO9B,EAAK8B,MACZC,IAAKtB,EACLuB,QAAS,OACTC,gBAAgB,SAK5B,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACI,SAACxC,EAAD,CAAYK,KAAMA,EAAMoC,iBAAkB,CAAC7B,EAAgBC,SAI1E,C,wDCtEK6B,GAAmBzC,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IACxB0C,GAAM1C,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IACX2C,GAAgB3C,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IAGrB4C,GAAe5C,EAAAA,EAAAA,OAAK,kBAAM,uDAAN,IAkC1B,IA/BA,SAAuBC,GAQnB,IAAOmC,EAAwCnC,EAAxCmC,QAASS,EAA+B5C,EAA/B4C,MAAOC,EAAwB7C,EAAxB6C,UAAWC,EAAa9C,EAAb8C,UAC1BC,GAAMC,EAAAA,EAAAA,GAAe,UAArBD,EAER,OAAO,UAAC,EAAAV,SAAD,CAAUC,SAAU,KAApB,UACFH,IAAW,SAACQ,EAAD,WAAc,SAACH,EAAD,MACzBI,IAAS,+BACN,SAACD,EAAD,WACI,UAACF,EAAD,CACIQ,QAAQ,WACRC,KAAK,SACLC,MAAM,UACN,aAAW,SACX9B,QAASyB,EALb,WAOI,SAACJ,EAAD,IACEK,EAAE,yBAIXZ,IAAYS,IAAU,8BAAGC,MAErC,C,sGC4BD,UAxDA,SAAsBO,GAElB,IAAMC,GAAWC,EAAAA,EAAAA,KACjB,GAIIC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWC,EAAAA,EAAAA,IAAYD,EAAvB,IAHfrB,EADJ,EACIA,QACAS,EAFJ,EAEIA,MACOc,EAHX,EAGIC,MAWJ,OAPAC,EAAAA,EAAAA,YAAU,WACNP,GAASQ,EAAAA,EAAAA,MACZ,GAEG,KAIA,SAAC,IAAD,CACI1B,QAASA,EACTS,MAAOA,EACPE,UAAW,WAAOO,GAASQ,EAAAA,EAAAA,MAAe,EAC1ChB,WACI,0BACI,SAAC,KAAD,CACIiB,WAAS,EACTC,QAAS,EACTC,MACI,CACIC,OAAQ,QALpB,SAUQP,EACKQ,KAAI,SAAA/D,GAAI,OACD,SAAC,KAAD,CAEIgE,MAAI,EACJC,GAAI,GACJC,GAAI,EACJC,GAAI,EAEJC,GAAI,IAPR,UASI,SAAC,IAAD,CAAWpE,KAAMA,KARZA,EAAKe,GAFb,SAmBxC,C","sources":["components/GamesView/CardEntry.tsx","components/Others/ReloadWrapper.tsx","components/Tests/TestsGallery.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\nimport type { CardGame } from \"../../services/sharedDefintion\";\nconst CardDialog = lazy(() => import(\"./CardDialog\"));\n\nfunction CardEntry(props : {\n    game: CardGame;\n    [key: string | number | symbol] : any;\n}) {\n\n    // hooks\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n    const is_mobile_device = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    return (\n        <Card sx={{ position: \"relative\" }}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                sx={{ height: \"inherit\", zIndex: 1 }}\n            >\n                <CardMedia\n                    sx={{ zIndex: 1 }}\n                    title={gameTitle}\n                >\n                    <Image \n                        src={game.imagePath}\n                        srcSet={game.srcSet}\n                        sizes={game.sizes}\n                        alt={gameTitle}\n                        loading={\"lazy\"}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </Card>\n    );\n}\n\nexport default CardEntry;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n","import { useEffect } from \"react\";\n\n// Style\nimport Grid from \"@mui/material/Grid\";\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\nimport CardEntry from \"../GamesView/CardEntry\";\nimport { fetchTests, selectTests } from \"../../services/testsSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// The gallery component\nfunction TestsGallery(_props : {[key: string | number | symbol] : any}) {\n\n    const dispatch = useAppDispatch();\n    const {\n        loading,\n        error,\n        games: data\n    } = useAppSelector((state) => selectTests(state));\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchTests());\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper  \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchTests());}}\n            component={\n                <div>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.id}\n                                            item \n                                            xs={12}\n                                            sm={6}\n                                            md={3}\n                                            // 5 items for this screen size\n                                            lg={2.4}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </div>\n            }\n        />\n    );\n}\n\nexport default TestsGallery;"],"names":["CardDialog","lazy","props","navigate","useNavigate","game","is_mobile_device","useMediaQuery","theme","breakpoints","down","useState","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","sx","position","onClick","window","location","href","onContextMenu","event","preventDefault","height","zIndex","src","imagePath","srcSet","sizes","alt","loading","disableSpinner","Suspense","fallback","contextMenuState","CircularProgress","Fab","AutorenewIcon","CenteredGrid","error","component","reloadFct","t","useTranslation","variant","size","color","_props","dispatch","useAppDispatch","useAppSelector","state","selectTests","data","games","useEffect","fetchTests","container","spacing","style","rowGap","map","item","xs","sm","md","lg"],"sourceRoot":""}