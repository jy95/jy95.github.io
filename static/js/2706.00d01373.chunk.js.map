{"version":3,"file":"static/js/2706.00d01373.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/GamesView/GamesSorters.tsx","services/sharedDefintion.tsx","components/GamesView/GenresSelect.tsx","components/GamesView/PlatformSelect.tsx","components/GamesView/TitleFilter.tsx","components/GamesView/GamesGalleryGrid.tsx","components/GamesView/PlatformIcons.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\nimport type { CardGame } from \"../../services/sharedDefintion\";\nconst CardDialog = lazy(() => import(\"./CardDialog\"));\n\nfunction CardEntry(props : {\n    game: CardGame;\n    [key: string | number | symbol] : any;\n}) {\n\n    // hooks\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n    const is_mobile_device = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    return (\n        <Card sx={{ position: \"relative\" }}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                sx={{ height: \"inherit\", zIndex: 1 }}\n            >\n                <CardMedia\n                    sx={{ zIndex: 1 }}\n                    title={gameTitle}\n                >\n                    <Image \n                        src={game.imagePath}\n                        srcSet={game.srcSet}\n                        sizes={game.sizes}\n                        alt={gameTitle}\n                        loading={\"lazy\"}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </Card>\n    );\n}\n\nexport default CardEntry;","import { useState, Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n// To check what should happen when clicking on a game\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Button from '@mui/material/Button';\n\nimport { sortingGames } from \"../../services/gamesSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// TODO Idea For sorting criteria reorder\n//import Switch from '@mui/material/Switch';\n\n// Lazy\nconst Checkbox = lazy(() => import(\"@mui/material/Checkbox\"));\nconst Select = lazy(() => import(\"@mui/material/Select\"));\nconst NativeSelect = lazy(() => import(\"@mui/material/NativeSelect\"));\nconst MenuItem = lazy(() => import(\"@mui/material/MenuItem\"));\nconst InputLabel = lazy(() => import(\"@mui/material/InputLabel\"));\nconst FormControl = lazy(() => import(\"@mui/material/FormControl\"));\n\nconst List = lazy(() => import(\"@mui/material/List\"));\nconst ListItem = lazy(() => import(\"@mui/material/ListItem\"));\nconst ListItemText = lazy(() => import(\"@mui/material/ListItemText\"));\n\nconst Dialog = lazy(() => import(\"@mui/material/Dialog\"));\nconst DialogTitle = lazy(() => import(\"@mui/material/DialogTitle\"));\nconst DialogContent = lazy(() => import(\"@mui/material/DialogContent\"));\nconst DialogActions = lazy(() => import(\"@mui/material/DialogActions\"));\n\n// To display ASC / DESC\nconst ArrowDropUpIcon = lazy(() => import(\"@mui/icons-material/ArrowDropUp\"));\nconst ArrowDropDownIcon = lazy(() => import(\"@mui/icons-material/ArrowDropDown\"));\n\n// Sort buttons of GamesGallery\nfunction GamesSorters(_props : {[key: string | number | symbol] : any}) {\n\n    // hooks\n    const { t } = useTranslation('common');\n    const dispatch = useAppDispatch();\n\n    // state\n    const [ isDialogOpen, setDialogOpen ] = useState(false);\n    const sortState = useAppSelector((state) => state.games.sorters);\n    const isNative = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n    let [ newSortState, setNewSortState ] = useState([...sortState]);\n\n    // map field to labels in translation file(s)\n    type sortLabels = 'name' | 'releaseDate' | 'duration';\n    const field_labels : {\n        [sortKey: string]: `gamesLibrary.sortLabels.${sortLabels}`\n    } = {\n        \"name\": \"gamesLibrary.sortLabels.name\",\n        \"releaseDate\": \"gamesLibrary.sortLabels.releaseDate\",\n        \"duration\": \"gamesLibrary.sortLabels.duration\"\n    }\n\n    // handle input change\n    const handleInputChange = (\n        params : {\n            index: number,\n            type: 'criteriaOrder' | 'changeFieldOrder'\n            field: 'name' | 'releaseDate' | 'duration'\n        }\n    ) => {\n        const index = params.index;\n        const modifiedState = [...newSortState];\n\n        switch (params.type) {\n            case \"criteriaOrder\":\n                const nextState = (modifiedState[index][1] === \"ASC\") ? \"DESC\" : \"ASC\";\n                modifiedState[index] = [ modifiedState[index][0], nextState]\n                setNewSortState(modifiedState);\n                break;\n\n            case \"changeFieldOrder\":\n                modifiedState[index] = [params.field, modifiedState[index][1]];\n                setNewSortState(modifiedState);\n                break;\n        \n            default:\n                break;\n        }\n    }\n\n    const CustomSelect = ({criteria, index} : {criteria: string, index: number}) => {\n        // shared props\n        const props = {\n            value: newSortState[index][0],\n            id: \"searchCriteria_\" + index,\n            label: t(\"gamesLibrary.sortForm.criteria\"),\n            onChange: (event : any) => handleInputChange({\n                    index,\n                    field: event.target.value.toString() as \"name\" | \"releaseDate\" | \"duration\", \n                    type: \"changeFieldOrder\"\n            })\n        }\n\n        if (isNative){\n            return <FormControl>\n                <InputLabel htmlFor={\"searchCriteria_\" + index}>\n                    {t(\"gamesLibrary.sortForm.criteria\")}\n                </InputLabel>\n                <NativeSelect\n                    {...props}\n                >\n                    {\n                        Object\n                            .entries(field_labels)\n                            .map( ([field, translationKey]) => \n                                <option value={field} key={field}>\n                                    {t(`${translationKey}` as const)}\n                                </option>\n                            )\n                    }\n                </NativeSelect>\n            </FormControl>\n        } else {\n            return <FormControl>\n                <InputLabel id={\"searchCriteriaLabel_\" + index}>\n                    {t(\"gamesLibrary.sortForm.criteria\")}\n                </InputLabel>\n                <Select\n                    {...props}\n                    labelId={\"searchCriteriaLabel_\" + index}\n                >\n                    {\n                        Object\n                            .entries(field_labels)\n                            .map( ([field, translationKey]) => \n                                <MenuItem value={field} key={field}>\n                                    {t(`${translationKey}` as const)}\n                                </MenuItem>\n                            )\n                    }\n                </Select>                \n            </FormControl>\n        }\n    }\n\n    return <>\n        <Button variant=\"contained\" onClick={() => setDialogOpen(true)}>\n            {t(\"gamesLibrary.sortButtonLabel\")}\n        </Button>\n        <Suspense fallback={null}>\n            <Dialog\n                //fullWidth\n                fullScreen={isNative}\n                open={isDialogOpen}\n                onClose={() => setDialogOpen(false)}\n                aria-labelledby=\"games-sorters-dialog\"\n            >\n                <DialogTitle id=\"games-sorters-dialog\">\n                    {t(\"gamesLibrary.sortForm.title\")}\n                </DialogTitle>\n                <DialogContent>\n                    <List>\n                        {\n                            newSortState.map( ([criteria, _], index) => <ListItem key={index}>\n                                <ListItemText primary={ t((index === 0) ? \"gamesLibrary.sortForm.firstSort\" : \"gamesLibrary.sortForm.nextSort\" ) }/>\n                                <CustomSelect \n                                    criteria={criteria}\n                                    index={index}\n                                    key={index}\n                                />\n                                <Checkbox\n                                    edge={'end'}\n                                    checked={newSortState[index][1] !== \"ASC\"}\n                                    onChange={\n                                        () => \n                                        handleInputChange({\n                                            index, \n                                            field: criteria, \n                                            type: \"criteriaOrder\"\n                                        })\n                                    }\n                                    checkedIcon={<ArrowDropUpIcon />}\n                                    icon={<ArrowDropDownIcon />} \n                                />\n                            </ListItem>)\n                        }\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={() => {\n                        // restore previous state\n                        setNewSortState(sortState);\n                        setDialogOpen(false);\n                    }}>\n                        {t(\"gamesLibrary.sortForm.cancelButton\")}\n                    </Button>\n                    {/* TODO replace that */}\n                    <Button autoFocus onClick={() => {\n                        setDialogOpen(false);\n                        dispatch(sortingGames(newSortState));\n                    }}>\n                        {t(\"gamesLibrary.sortForm.sortButton\")}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Suspense>\n    </>;\n}\n\nexport default GamesSorters;","export type Platform = \"PC\" | \"GBA\" | \"PSP\" | \"PS1\" | \"PS2\" | \"PS3\";\n\nexport const genre_list = [\n    \"Action\",\n    \"Adventure\",\n    \"Arcade\",\n    \"Board Games\",\n    \"Card\",\n    \"Casual\",\n    \"Educational\",\n    \"Family\",\n    \"Fighting\",\n    \"Indie\",\n    \"MMORPG\",\n    \"Platformer\",\n    \"Puzzle\",\n    \"RPG\",\n    \"Racing\",\n    \"Shooter\",\n    \"Simulation\",\n    \"Sports\",\n    \"Strategy\",\n    \"Misc\"\n] as const;\nexport type Genre = typeof genre_list[number];\n\n// structure used in data/games.json\ninterface BasicEntry {\n    /** @description Technical identifier for React - by default : playlistId | videoId */\n    id: string,\n    /** @description Title of the game, such as \"Beyond Good & Evil\" */\n    title: string;\n    /** @description Platform for that game */\n    platform: Platform;\n    /** @description Duration of the walkthrough (e.g. \"01:42:13\") */\n    duration?: string;\n    /** @description Genres of the game */\n    genres: Genre[];\n    /** @description When the game was released, such \"01/09/2005\" */\n    releaseDate: string;\n    /** @description When to display the game public, such as 20210412 (12/04/2021) */\n    availableAt?: number;\n    /** @description When to display the game public, such as 20210420 (20/04/2021) */\n    endAt?: number;\n    /** @description Name of the main cover file, such as \"cover.webp\" */\n    coverFile?: string;\n    /** @description Does game has responsive images to offer */\n    hasResponsiveImages?: boolean;\n}\n\nexport interface BasicVideo extends BasicEntry {\n    /** @description Video ID from Youtube - what you see after \"watch?v=\" */\n    videoId: string;\n}\n\nexport interface BasicPlaylist extends BasicEntry {\n    /** @description Playlist ID from Youtube, what you see after \"playlist?list=\" */\n    playlistId: string;\n}\n\n// structure used in data/games.json\nexport type BasicGame = BasicVideo | BasicPlaylist;\n\n// structure for Card entry\ninterface CardEntry {\n    /** @description Link to the main picture (for the card components) */\n    imagePath: string;\n    /** @description Responsive images */\n    srcSet?: string;\n    /** @description Responsive sizes */\n    sizes?: string;\n    /** @description Link to Youtube */\n    url: string;\n    /** @description Type of Youtube link */\n    url_type: 'PLAYLIST' | 'VIDEO';\n};\n\n// structured after parsing data/games.json\nexport interface EnhancedGame extends Omit<BasicGame, \"releaseDate\">, CardEntry {\n    /** @description When the game was released (Date(2020, 02, 02).getTime()) */\n    releaseDate: number;\n    /** @description \"duration\" into something useful for sorting */\n    durationAsInt: number;\n};\n\n// structure used for GameEntry and thus GameDialog\nexport interface CardGame extends Omit<BasicGame, \"releaseDate\" | \"genres\" | \"platform\">, CardEntry {};","import { useTranslation } from \"react-i18next\";\n\n// React Material UI\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from '@mui/material/TextField';\n\nimport { filteringByGenre, selectFilterByName } from \"../../services/gamesSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\nimport type { Genre as GenreValue } from \"../../services/sharedDefintion\";\n// Each one is also a key for translation\nimport { genre_list as GENRES } from \"../../services/sharedDefintion\";\n\n// Genres filter of GamesGallery\nfunction GenresSelect(_props : {[key: string | number | symbol] : any}) {\n\n    const dispatch = useAppDispatch();\n    const selectedGenres : string[] = useAppSelector(\n        (state) => selectFilterByName(state, {\n            filterKey: \"selected_genres\",\n            defaultValue: []\n        })\n    )\n    const { t } = useTranslation('common');\n\n    // Generate list of values for game genre\n    const genre_options : {\n        label: string,\n        key: GenreValue\n    }[] = GENRES\n        .map(genre => ({\n            label: t(`gamesLibrary.gamesGenres.${genre}` as const),\n            key: genre\n        }))\n        .sort( \n            (a, b) => (a.label < b.label) ? -1 : (a.label > b.label ? 1 : 0) \n        );\n\n    return <>\n        <Autocomplete\n            multiple\n            openOnFocus\n            filterSelectedOptions \n            id=\"select-game-genre\"\n            limitTags={3}\n            options={genre_options}\n            getOptionLabel={(option : any) => option.label}\n            isOptionEqualToValue={(option, value) => \n                Array.isArray(value) ? value.some(v => v.key === option.key) : value.key === option.key\n            }\n            value={selectedGenres.map(genre => ({\n                label: t(`gamesLibrary.gamesGenres.${genre as GenreValue}` as const),\n                key: genre\n            }))}\n            renderInput={(params) => <TextField {...params} label={t(\"gamesLibrary.filtersLabels.genres\") as string} />}\n            onChange={(_event, value) => {\n                dispatch(filteringByGenre(value.map(v => v.key)));\n            }}\n        />\n    </>;\n}\n\nexport default GenresSelect;","import { useTranslation } from \"react-i18next\";\n\n// React Material UI\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from '@mui/material/TextField';\nimport SvgIcon from '@mui/material/SvgIcon';\n\nimport { filterByPlatform, selectFilterByName } from \"../../services/gamesSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// icons\nimport iconsSVG from \"./PlatformIcons\";\nimport type { Platform } from \"../../services/sharedDefintion\";\n\nconst PLATFORMS = [\n    \"GBA\",\n    \"PC\",\n    \"PS1\",\n    \"PS2\",\n    \"PS3\",\n    \"PSP\"\n];\n\nfunction PlatformSelect(_props : {[key: string | number | symbol] : any}) {\n\n    const { t } = useTranslation('common');\n    const dispatch = useAppDispatch();\n    const selectedPlatform : string  = useAppSelector(\n        (state) => selectFilterByName(state, {\n            filterKey: \"selected_platform\",\n            defaultValue: \"\"\n        })\n    )\n\n    const options = PLATFORMS\n        .map(platform => ({\n            label: platform,\n            key: platform\n        }))\n\n    return <>\n        <Autocomplete\n            id=\"select-game-platform\"\n            openOnFocus\n            options={options}\n            getOptionLabel={(option: any) => option.label}\n            isOptionEqualToValue={(option, value) => \n                Array.isArray(value) ? value.some(v => v.key === option.key) : value.key === option.key\n            }\n            renderInput={(params) => <TextField {...params} label={t(\"gamesLibrary.filtersLabels.platform\")} />}\n            renderOption={(props, option, _state) => (\n                <li {...props} key={option.key}>\n                    <SvgIcon titleAccess={option.label}>\n                        {iconsSVG[option.key as Platform]}\n                    </SvgIcon>\n                    {option.label}\n                </li>\n            )}\n            onChange={(_event, value) => {\n                const platform = (value) ? (value as {[key: string]: any})?.key || value : \"\";\n                dispatch(filterByPlatform(platform));\n            }}\n            value={\n                selectedPlatform ? {\n                    key: selectedPlatform,\n                    label: selectedPlatform\n                } : null\n            }\n        />\n    </>;\n}\n\nexport default PlatformSelect;","import { useTranslation } from \"react-i18next\";\n\n// React Material UI\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from '@mui/material/TextField';\n\nimport {\n    filterByTitle,\n    selectFilterByName\n} \nfrom \"../../services/gamesSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\nfunction TitleFilter(_props : {[key: string | number | symbol] : any}) {\n\n    const { t } = useTranslation('common');\n    const dispatch = useAppDispatch();\n\n    // needed as this Autocomplete cannot have duplicate\n    const options = useAppSelector((state) => \n        [...new Set(state.games.games.map(game => game.title))]\n    );\n    const title : string  = useAppSelector(\n        (state) => selectFilterByName(state, {\n            filterKey: \"selected_title\",\n            defaultValue: \"\"\n        })\n    )\n\n    return <>\n        <Autocomplete\n            id=\"search-game-title\"\n            freeSolo\n            options={options}\n            value={title}\n            renderInput={(params) => <TextField {...params} label={t(\"gamesLibrary.filtersLabels.title\")} />}\n            onInputChange={(_event, value) => {\n                dispatch(filterByTitle(value));\n            }}\n        />\n    </>;\n\n}\n\nexport default TitleFilter;","import { useEffect, useCallback } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport { shallowEqual } from 'react-redux';\nimport useInfiniteLoader from 'react-use-infinite-loader';\nimport { useTranslation } from \"react-i18next\";\nimport Alert from '@mui/material/Alert';\n\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// Style\nimport Grid from \"@mui/material/Grid\";\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\nimport CardEntry from \"./CardEntry\";\nimport GamesSorters from \"./GamesSorters\";\nimport GenresSelect from \"./GenresSelect\";\nimport PlatformSelect from \"./PlatformSelect\";\nimport TitleFilter from \"./TitleFilter\";\n\n// Redux\nimport { \n    fetchGames,\n    scrollingFetching,\n    selectCurrentGames\n}\nfrom \"../../services/gamesSlice\";\nimport type { EnhancedGame } from \"../../services/sharedDefintion\";\n\nconst PREFIX = 'GamesGalleryGrid';\n\nconst classes = {\n    gamesCriteria: `${PREFIX}-gamesCriteria`,\n    loaderRef: `${PREFIX}-loaderRef`\n};\n\nconst StyledGamesGallery = styled('div')((\n    {\n        theme\n    }\n) => ({\n    // inspired by the settings https://www.youtube.com/gaming uses ;)\n    [`& .${classes.gamesCriteria}`]: {\n        display: \"flex\",\n        [theme.breakpoints.down('md')]: {\n            flexDirection: \"column\",\n            rowGap: \"8px\"\n        },\n        [theme.breakpoints.up('md')]: {\n            flexDirection: \"row\",\n            justifyContent: \"flex-end\"\n        }\n    },\n    [`& .${classes.loaderRef}`]: {\n        width: \"1px\",\n        height: \"1px\",\n        position: \"absolute\"\n    }\n}));\n\n// The gallery component\nfunction GamesGalleryGrid(_props : {[key: string | number | symbol] : any}) {\n\n    const { t } = useTranslation('common');\n    const dispatch = useAppDispatch();\n\n    // Current displayed games\n    const currentGames = useAppSelector(\n        (state) => selectCurrentGames(state)\n    );\n\n    const {\n        loading,\n        error,\n        currentItemCount,\n        totalItems,\n        activeFilters,\n        sorters,\n        initialLoad,\n        scrollLoading\n    } = useAppSelector((state) => state.games, shallowEqual);\n\n    const canLoadMore = (currentItemCount <= totalItems);\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchGames({currentFilters: activeFilters, sortStates: sorters}))\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps \n        []\n    );\n\n    // render row\n    const renderRow = (game : EnhancedGame) =>\n        <Grid \n            key={game.id}\n            item\n            xs={6}\n            md={4}\n            lg={1.5}\n        >\n            <CardEntry game={game}/>\n    </Grid>;\n\n    const loadMoreGames = useCallback( () => {\n        dispatch(scrollingFetching());\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps \n        []\n    );\n\n    const { loaderRef } = useInfiniteLoader({\n        loadMore: loadMoreGames,\n        canLoadMore,\n        initialise: !initialLoad,\n        debug: false,\n    });\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchGames({currentFilters: activeFilters, sortStates: sorters}))}}\n            component={\n                <StyledGamesGallery>\n                    <Grid\n                        container\n                        className={classes.gamesCriteria}\n                    >\n                        <Grid item xs={12} md={1}>\n                            <GamesSorters />\n                        </Grid>\n                        <Grid item xs={12} md={2}>\n                            <PlatformSelect variant=\"standard\" />\n                        </Grid>\n                        <Grid item xs={12} md={5}>\n                            <GenresSelect variant=\"standard\" />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <TitleFilter />\n                        </Grid>\n                    </Grid>\n\n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            currentGames\n                                // render row\n                                .map(renderRow)\n                        }\n                    </Grid>\n                    {!initialLoad && <div ref={loaderRef as any} className={classes.loaderRef} />}\n                    {scrollLoading && <Alert severity=\"info\">{t(\"common.loading\")}</Alert>}\n                    {!canLoadMore && <Alert severity=\"info\">{t(\"common.noResults\")}</Alert>}\n                </StyledGamesGallery>\n            }\n        />\n    );\n}\n\nexport default GamesGalleryGrid;","const platformIcons = {\n    \"PS1\": <path d=\"M8.985 2.596v17.548l3.915 1.261V6.688c0-.69.304-1.151.794-.991.636.181.76.814.76 1.505v5.876c2.441 1.193 4.362-.002 4.362-3.153 0-3.237-1.126-4.675-4.438-5.827-1.307-.448-3.728-1.186-5.391-1.502h-.002zm4.656 16.242l6.296-2.275c.715-.258.826-.625.246-.818-.586-.192-1.637-.139-2.357.123l-4.205 1.499v-2.385l.24-.085s1.201-.42 2.913-.615c1.696-.18 3.785.029 5.437.661 1.848.601 2.041 1.472 1.576 2.072s-1.622 1.036-1.622 1.036l-8.544 3.107v-2.297l.02-.023zM1.808 18.6c-1.9-.545-2.214-1.668-1.352-2.321.801-.585 2.159-1.051 2.159-1.051l5.616-2.013v2.313L4.206 17c-.705.271-.825.632-.239.826s1.637.15 2.343-.12L8.248 17v2.074c-.121.029-.256.044-.391.073-1.938.331-3.995.196-6.037-.479l-.012-.068z\"/>,\n    \"PS2\": <path d=\"M7.46 13.779v.292h4.142v-3.85h3.796V9.93h-4.115v3.85zm16.248-3.558v1.62h-7.195v2.23H24v-.292h-7.168v-1.646H24V9.929h-7.487v.292zm-16.513.0v1.62H0v2.23h.292v-1.938H7.46V9.929H0v.292z\"/>,\n    \"PS3\": <path d=\"M15.363 9.438h-3.148c-.97 0-1.447.6-1.447 1.38v2.366c0 .483-.228.83-.71.83H7.304c-.02 0-.035.017-.035.035v.47c0 .02.01.032.03.032h3.11c.97 0 1.45-.597 1.45-1.377V10.81c0-.484.225-.832.71-.832h2.782c.02 0 .04-.014.04-.033V9.47c0-.02-.02-.035-.04-.035zm-9.267 0H.038c-.022 0-.038.017-.038.035v.477c0 .02.016.036.038.036h5.694c.48 0 .71.347.71.83s-.228.83-.71.83H1.228c-.7 0-1.227.587-1.227 1.366v1.513c0 .02.02.037.04.037h1.03c.02 0 .04-.016.04-.037v-1.513c0-.48.28-.82.68-.82H6.1c.97 0 1.444-.595 1.444-1.375s-.473-1.38-1.442-1.38zm17.454 2.498c-.015-.015-.015-.04 0-.056.3-.25.45-.627.45-1.062 0-.778-.474-1.38-1.446-1.38h-6.057c-.02 0-.036.018-.036.038v.475c0 .02.02.04.04.04h5.7c.48 0 .715.35.715.83s-.23.83-.712.83h-5.7c-.02 0-.036.02-.036.04v.48c0 .02.016.034.037.034h5.7c.63.007.71.62.71.93v.06c0 .485-.23.833-.71.833h-5.7c-.02 0-.036.015-.036.034v.477c0 .02.015.037.036.037h6.05c.973 0 1.446-.645 1.446-1.38v-.057c0-.47-.15-.916-.45-1.19z\"/>,\n    \"PSP\":  <>\n        <path d=\"M3.238 9.313h5.133v1.52h-4.93v1.32h-.203v-1.52h4.93V9.512h-4.93v-.199m11.539 1.519v1.32h-.199v-1.52h4.926v-1.12h-4.926v-.199h5.129v1.52h-4.93\"/>\n        <path d=\"M10.988 9.313v2.641H8.371v.199h2.828V9.512h2.613v-.199h-2.824\"/>\n    </>,\n    \"PC\": <>\n        <path d=\"M4.539 7.516v6.371h3.148l.008-2.148.012-2.141.918-.012.918-.008 1.004-.988 1.004-.984V3.148l-1.023-1.004-1.02-1.004H4.539z\"/>\n        <path d=\"M8.281 5.41l.008 1.703L8 7.102l-.293-.012-.012-1.684-.008-1.684.25-.008.293-.012c.023.004.043.605.051 1.707zm4.813-3.262l-1.02 1v8.77l1.004.984 1.008.984h3.371l1.004-.988 1-.98-.016-3.5h-3.301l-.012 1.461-.008 1.469h-.523V3.719h.523l.008 1.207.012 1.207h3.301l.016-2.984-1.02-1-1.023-1.008h-3.301z\"/>\n    </>,\n    \"GBA\": <path d=\"M12 19.199c-2.543 0-4.32-.238-5.281-.77-.191-.094-.336-.141-.43-.141-2.879-.098-4.32-1.105-4.898-1.73-.285-.289-.43-.621-.43-1.055 0-2.113.094-6 .48-7.488.191-.766.91-1.297 1.727-1.297s2.063-.77 2.883-1.488c.379-.285.813-.43 1.246-.43h9.453c.48 0 .961.191 1.25.48.625.574 1.969 1.438 2.832 1.438.816 0 1.535.531 1.727 1.297.336 1.297.48 4.656.48 7.441 0 .434-.145.766-.43 1.055-.625.625-2.02 1.633-4.898 1.727-.191 0-.336.051-.383.098-.863.574-2.641.863-5.328.863zm-5.711-1.871c.238 0 .527.098.863.242.48.238 1.68.668 4.848.668 3.359 0 4.465-.477 4.75-.668.242-.195.578-.289.961-.289 2.594-.098 3.84-1.059 4.223-1.441.098-.098.145-.238.145-.383 0-2.641-.141-6-.477-7.152-.098-.336-.434-.574-.77-.574C19.535 7.73 18 6.625 17.328 6c-.191-.191-.434-.191-.578-.191H7.297c-.191 0-.434.098-.625.242-.285.238-2.016 1.629-3.504 1.629-.383 0-.672.242-.766.578-.336 1.199-.48 4.559-.48 7.246 0 .145.047.289.145.387.383.379 1.629 1.34 4.223 1.438zM3.84 8.641h.961v2.879H3.84zm-.961 1.918v-.957h2.883v.957zm17.52-1.918a.74.74 0 0 1 .723.719.74.74 0 0 1-.723.719.74.74 0 0 1-.719-.719.74.74 0 0 1 .719-.719zm-1.437 1.438a.74.74 0 0 1 .719.723.74.74 0 0 1-.719.719.74.74 0 0 1-.723-.719.74.74 0 0 1 .723-.723zm-13.25 3.793c.098-.238 0-.527-.191-.621l-1.441-.723c-.238-.098-.527 0-.621.191-.098.242 0 .531.191.625l1.441.719c.047.047.141.047.191.047.191.051.336-.043.43-.238zm0 1.922c.098-.242 0-.527-.191-.625l-1.441-.719c-.238-.098-.527 0-.621.191-.098.238 0 .527.191.625l1.441.719c.047.047.141.047.191.047.191.047.336-.047.43-.238zm10.129.047H8.16c-.574 0-.961-.383-.961-.961V8.641c0-.578.387-.961.961-.961h7.68c.574 0 .961.383.961.961v6.238c0 .578-.387.961-.961.961zM8.16 8.641v6.238h7.68V8.641zm10.414 5.23l1.922-.961c.094-.047.145-.191.094-.336-.047-.094-.191-.145-.336-.094l-1.918.961c-.098.047-.145.191-.098.336.051.094.145.145.191.145.098 0 .145 0 .145-.051zm0 .961l1.922-.961c.094-.047.145-.191.094-.336-.047-.094-.191-.145-.336-.094l-1.918.957c-.098.051-.145.191-.098.336.051.098.145.145.191.145.098 0 .145 0 .145-.047zm0 .961l1.922-.961c.094-.047.145-.191.094-.336-.047-.098-.191-.145-.336-.098l-1.918.961c-.098.051-.145.191-.098.336.051.098.145.145.191.145.098 0 .145 0 .145-.047zm0 0\"/>\n}\nexport default platformIcons;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n"],"names":["CardDialog","lazy","props","navigate","useNavigate","game","is_mobile_device","useMediaQuery","theme","breakpoints","down","useState","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","sx","position","onClick","window","location","href","onContextMenu","event","preventDefault","height","zIndex","src","imagePath","srcSet","sizes","alt","loading","disableSpinner","Suspense","fallback","contextMenuState","Checkbox","Select","NativeSelect","MenuItem","InputLabel","FormControl","List","ListItem","ListItemText","Dialog","DialogTitle","DialogContent","DialogActions","ArrowDropUpIcon","ArrowDropDownIcon","_props","t","useTranslation","dispatch","useAppDispatch","isDialogOpen","setDialogOpen","sortState","useAppSelector","state","games","sorters","isNative","newSortState","setNewSortState","field_labels","handleInputChange","params","index","modifiedState","type","nextState","field","CustomSelect","criteria","value","label","onChange","target","toString","htmlFor","Object","entries","map","translationKey","labelId","Button","variant","fullScreen","open","onClose","primary","edge","checked","checkedIcon","icon","autoFocus","sortingGames","genre_list","selectedGenres","selectFilterByName","filterKey","defaultValue","genre_options","GENRES","genre","key","sort","a","b","Autocomplete","multiple","openOnFocus","filterSelectedOptions","limitTags","options","getOptionLabel","option","isOptionEqualToValue","Array","isArray","some","v","renderInput","TextField","_event","filteringByGenre","PLATFORMS","selectedPlatform","platform","renderOption","_state","SvgIcon","titleAccess","iconsSVG","filterByPlatform","Set","freeSolo","onInputChange","filterByTitle","PREFIX","classes","gamesCriteria","loaderRef","StyledGamesGallery","styled","display","flexDirection","rowGap","up","justifyContent","width","currentGames","selectCurrentGames","shallowEqual","error","currentItemCount","totalItems","activeFilters","initialLoad","scrollLoading","canLoadMore","useEffect","fetchGames","currentFilters","sortStates","loadMoreGames","useCallback","scrollingFetching","useInfiniteLoader","loadMore","initialise","debug","ReloadWrapper","reloadFct","component","Grid","container","className","item","xs","md","spacing","style","lg","CardEntry","ref","Alert","severity","platformIcons","d","CircularProgress","Fab","AutorenewIcon","CenteredGrid","size","color"],"sourceRoot":""}