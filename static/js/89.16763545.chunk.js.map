{"version":3,"file":"static/js/89.16763545.chunk.js","mappings":"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","sources":["components/GamesView/CardDialog.tsx"],"sourcesContent":["import { lazy } from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\n// For full screen Dialog \nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\n// For snackbars\nimport { useSnackbar } from 'notistack';\n\n// For Dialog\nconst Dialog = lazy(() => import(\"@mui/material/Dialog\"));\nconst DialogActions = lazy(() => import(\"@mui/material/DialogActions\"));\nconst DialogContent = lazy(() => import(\"@mui/material/DialogContent\"));\nconst DialogTitle = lazy(() => import(\"@mui/material/DialogTitle\"));\n\n// For a custom contextMenu (nice for UI)\nconst List = lazy(() => import(\"@mui/material/List\"));\nconst ListItem = lazy(() => import(\"@mui/material/ListItem\"));\nconst ListItemIcon = lazy(() => import(\"@mui/material/ListItemIcon\"));\nconst ListItemText = lazy(() => import(\"@mui/material/ListItemText\"));\nconst Button = lazy(() => import(\"@mui/material/Button\"));\n\n// Icons for contextMenu\nconst YouTubeIcon = lazy(() => import(\"@mui/icons-material/YouTube\"));\nconst PlayArrowIcon = lazy(() => import(\"@mui/icons-material/PlayArrow\"));\nconst FileCopyIcon = lazy(() => import(\"@mui/icons-material/FileCopy\"));\nconst RedditIcon = lazy(() => import(\"@mui/icons-material/Reddit\"));\nconst TwitterIcon = lazy(() => import(\"@mui/icons-material/Twitter\"));\nconst FacebookIcon = lazy(() => import(\"@mui/icons-material/Facebook\"));\n\n// labels\nconst LABEL_WATCH_ON_YT = \"gamesLibrary.actionsButton.watchOnYt\";\nconst LABEL_WATCH_HERE = \"gamesLibrary.actionsButton.watchHere\";\nconst LABEL_COPY_LINK = \"gamesLibrary.actionsButton.copyLink\";\nconst LABEL_TWITTER = \"gamesLibrary.actionsButton.shareOnTwitter\";\nconst LABEL_FACEBOOK = \"gamesLibrary.actionsButton.shareOnFacebook\";\nconst LABEL_REDDIT = \"gamesLibrary.actionsButton.shareOnReddit\";\nconst LABEL_CLOSE_BUTTON = \"gamesLibrary.actionsButton.closeContextMenu\";\nconst LABEL_COPIED_LINK = \"gamesLibrary.snackbarsMessages.copiedLink\";\n\nfunction CardDialog(props) {\n    \n    // hooks\n    const { t } = useTranslation('common');\n    const navigate = useNavigate();\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n    const { enqueueSnackbar } = useSnackbar();\n\n    // props\n    const {game, contextMenuState: [contextMenuOpen,setContextMenuOpen]} = props;\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.playlistId : \"/video/\" + game.videoId;\n\n    // dialog options\n    const dialog_options = [\n        // Watch here\n        {\n            \"key\": \"watchHere\",\n            \"icon\": () => <PlayArrowIcon fontSize=\"small\"/>,\n            \"text\": t(LABEL_WATCH_HERE, { \"gameName\": gameTitle}),\n            \"onClick\": () => {\n                setContextMenuOpen(false);\n                navigate(local_path);\n            }\n        },\n        // watch on Youtube\n        {\n            \"key\": \"watchOnYoutube\",\n            \"icon\": () => <YouTubeIcon fontSize=\"small\"/>,\n            \"text\": t(LABEL_WATCH_ON_YT, { \"gameName\": gameTitle}),\n            \"onClick\": () => {\n                setContextMenuOpen(false);\n                window.location.href = gameURL;\n            }\n        },\n        // Copy link\n        {\n            \"key\": \"copyLink\",\n            \"divider\": true,\n            \"icon\": () => <FileCopyIcon fontSize=\"small\"/>,\n            \"text\": t(LABEL_COPY_LINK),\n            \"onClick\": async () => {\n                if (navigator.clipboard !== undefined) {//Chrome\n                    await navigator.clipboard.writeText(gameURL);\n                } else if((window as any).clipboardData) { // Internet Explorer\n                    (window as any).clipboardData.setData(\"text/plain\", gameURL);\n                }\n                enqueueSnackbar(\n                    t(LABEL_COPIED_LINK, { \"gameName\": gameTitle }),\n                    {\n                        \"variant\": \"success\",\n                        \"autoHideDuration\": 2500\n                    }\n                )\n                setContextMenuOpen(false);\n            }\n        },\n        // Share on Twitter\n        {\n            \"key\": \"share-on-twitter\",\n            \"icon\": () => <TwitterIcon fontSize=\"small\"/>,\n            \"text\": t(LABEL_TWITTER),\n            \"onClick\": () => {\n                window.open(\"https://twitter.com/intent/tweet?url=\" + encodeURIComponent(gameURL), \"_blank\");\n                setContextMenuOpen(false);\n            }\n        },\n        // Share on Facebook\n        {\n            \"key\": \"share-on-facebook\",\n            \"icon\": () => <FacebookIcon fontSize=\"small\"/>,\n            \"text\": t(LABEL_FACEBOOK),\n            \"onClick\": () => {\n                window.open(\"https://www.facebook.com/sharer/sharer.php?u=\" + encodeURIComponent(gameURL), \"_blank\")\n                setContextMenuOpen(false);\n            }\n        },\n        // Share on Reddit\n        {\n            \"key\": \"share-on-reddit\",\n            \"icon\": () => <RedditIcon fontSize=\"small\"/>,\n            \"text\": t(LABEL_REDDIT),\n            \"onClick\": () => {\n                window.open(\"http://www.reddit.com/submit?title=\" + encodeURIComponent(gameTitle) + \"&url=\" + encodeURIComponent(gameURL) + \"&title=\",\"_blank\")\n                setContextMenuOpen(false);\n            }\n        }\n    ];\n\n    return (\n        <Dialog\n            fullScreen={fullScreen}\n            aria-labelledby=\"game-context-dialog-title\"\n            open={contextMenuOpen}\n            onClose={() => setContextMenuOpen(false)}\n        >\n            <DialogTitle id=\"game-context-dialog-title\">\n                {gameTitle}    \n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {\n                        dialog_options.map(option => \n                            <ListItem\n                                onClick={option.onClick}\n                                divider={option.divider || false}\n                                key={option.key}\n                            >\n                                <ListItemIcon>\n                                    {option.icon()}\n                                </ListItemIcon>\n                                <ListItemText primary={option.text} />\n                            </ListItem>\n                        )  \n                    }\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={() => {setContextMenuOpen(false)}}>{t(LABEL_CLOSE_BUTTON)}</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nexport default CardDialog;"],"names":["Dialog","lazy","DialogActions","DialogContent","DialogTitle","List","ListItem","ListItemIcon","ListItemText","Button","YouTubeIcon","PlayArrowIcon","FileCopyIcon","RedditIcon","TwitterIcon","FacebookIcon","props","t","useTranslation","navigate","useNavigate","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","enqueueSnackbar","useSnackbar","game","contextMenuState","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","playlistId","videoId","dialog_options","fontSize","window","location","href","undefined","navigator","clipboard","writeText","clipboardData","setData","open","encodeURIComponent","onClose","id","map","option","onClick","divider","icon","primary","text","key","autoFocus"],"sourceRoot":""}