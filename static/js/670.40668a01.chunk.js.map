{"version":3,"file":"static/js/670.40668a01.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/LatestVideos/LatestVideosGallery.tsx","components/Others/CenteredGrid.tsx","components/Others/CustomSnackbar.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import React, {Suspense} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\n// To check what should happen when clicking on a game\nimport { useTheme, styled } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\nimport Skeleton from '@mui/material/Skeleton';\n\nimport Tooltip from '@mui/material/Tooltip';\nimport Image from '@jy95/material-ui-image';\n// @ts-ignore\nconst CardDialog = React.lazy(() => import(\"./CardDialog.tsx\"));\n\nconst PREFIX = 'CardEntry';\n\nconst classes = {\n    gameRoot: `${PREFIX}-gameRoot`,\n    gameCover: `${PREFIX}-gameCover`,\n    MuiCardActionArea: `${PREFIX}-MuiCardActionArea`\n};\n\nconst StyledCard = styled(Card)((\n    {\n        theme\n    }\n) => ({\n    [`&.${classes.gameRoot}`]: {\n        position: \"relative\",\n        height: \"100%\"\n    },\n    [`& .${classes.gameCover}`]: {\n        zIndex: 1,\n        height: \"inherit\"\n    },\n    [`& .${classes.MuiCardActionArea}`]: {\n        height: \"inherit\",\n        zIndex: 1\n    }\n}));\n\nfunction CardEntry(props) {\n\n    // hooks\n    const theme = useTheme();\n    const { t } = useTranslation('common');\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n\n    const is_mobile_device = useMediaQuery(theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = React.useState(false);\n    \n    // labels\n    const LABEL_WATCH_ON_YT = \"gamesLibrary.actionsButton.watchOnYt\";\n    const LABEL_WATCH_HERE = \"gamesLibrary.actionsButton.watchHere\";\n\n    // consts\n    const label_for_game = (is_mobile_device) ? LABEL_WATCH_ON_YT : LABEL_WATCH_HERE;\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.playlistId : \"/video/\" + game.videoId;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    return (\n        <StyledCard className={classes.gameRoot}>\n\n            <Tooltip title={t(label_for_game, { \"gameName\": gameTitle})} aria-label=\"WatchGame\">\n                <CardActionArea \n                    onClick={watchGame}\n                    onContextMenu={(event) => {\n                        event.preventDefault();\n                        setContextMenuOpen(true);\n                    }}\n                    classes={{root: classes.MuiCardActionArea}}\n                >\n                    <CardMedia\n                        className={classes.gameCover}\n                        title={gameTitle}\n                    >\n                        <Image \n                            src={game.imagePath}\n                            alt={gameTitle} \n                            //disableSpinner={true} \n                            loading={<Skeleton variant=\"rectangular\" />}\n                        />\n                    </CardMedia>\n\n                </CardActionArea>\n            </Tooltip>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </StyledCard>\n    );\n}\n\nexport default CardEntry;","import React from \"react\";\nimport { styled } from '@mui/material/styles';\nimport {connect} from 'react-redux';\n// @ts-ignore\nimport {get_latest_videos} from \"../../actions/latestVideos.tsx\";\n\n// Custom\n// @ts-ignore\nimport ReloadWrapper from \"../Others/ReloadWrapper.tsx\";\n\n// Style\nimport Grid from \"@mui/material/Grid\";\n// @ts-ignore\nimport CardEntry from \"../GamesView/CardEntry.tsx\";\n\nconst PREFIX = 'LatestVideosGallery';\n\nconst classes = {\n    gameEntry: `${PREFIX}-gameEntry`,\n    gamesCriteria: `${PREFIX}-gamesCriteria`\n};\n\nconst StyledLatestVideosGallery = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.gameEntry}`]: {\n        [theme.breakpoints.only('xs')]: {\n            flexBasis: \"calc((100% / 1) - 1%)\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            flexBasis: \"calc((100% / 2) - 1%)\"\n        },\n        [theme.breakpoints.only('md')]: {\n            flexBasis: \"calc((100% / 4) - 1%)\"\n        },\n        [theme.breakpoints.up('lg')]: {\n            flexBasis: \"calc((100% / 5) - 1%)\"\n        },\n    },\n    [`& .${classes.gamesCriteria}`]: {\n        display: \"flex\",\n        [theme.breakpoints.down('md')]: {\n            flexDirection: \"column\",\n            rowGap: \"8px\"\n        },\n        [theme.breakpoints.up('md')]: {\n            flexDirection: \"row\",\n            justifyContent: \"flex-end\"\n        }\n    }\n}));\n\n// The gallery component\nfunction LatestVideosGallery(props) {\n\n    const {loading, error, data} = props;\n\n    // on mount, load data (only once)\n    React.useEffect(() => {\n        props.get_latest_videos();\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {props.get_latest_videos();}}\n            component={\n                <StyledLatestVideosGallery>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.playlistId ?? game.videoId} \n                                            item \n                                            className={classes.gameEntry}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </StyledLatestVideosGallery>            \n            }\n        />\n    );\n}\n\n// mapStateToProps(state, ownProps)\nconst mapStateToProps = state => ({\n    data: state.latestVideos.items\n});\n\nconst mapDispatchToProps = {\n    get_latest_videos\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LatestVideosGallery);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from \"@mui/material/Grid\";\n\nfunction CenteredBox(props) {\n    const {children} = props;\n    return (\n        <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            style={{minHeight: '80vh'}}\n        >\n            {children}\n        </Grid>\n    );\n}\n\nCenteredBox.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default CenteredBox;","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { cx } from '@emotion/css';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport InfoIcon from '@mui/icons-material/Info';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { amber, green } from '@mui/material/colors';\nimport IconButton from '@mui/material/IconButton';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport Snackbar from '@mui/material/Snackbar';\nimport SnackbarContent from '@mui/material/SnackbarContent';\n\n\nconst PREFIX = 'CustomizedSnackbar';\n\nconst classes = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    info: `${PREFIX}-info`,\n    warning: `${PREFIX}-warning`,\n    icon: `${PREFIX}-icon`,\n    iconVariant: `${PREFIX}-iconVariant`,\n    message: `${PREFIX}-message`\n};\n\nconst StyledSnackbar = styled(Snackbar)((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.success}`]: {\n        backgroundColor: green[600],\n    },\n    [`& .${classes.error}`]: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    [`& .${classes.info}`]: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    [`& .${classes.warning}`]: {\n        backgroundColor: amber[700],\n    },\n    [`& .${classes.icon}`]: {\n        fontSize: 20,\n    },\n    [`& .${classes.iconVariant}`]: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    [`& .${classes.message}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    [`& .${classes.success}`]: {\n        backgroundColor: green[600],\n    },\n    [`& .${classes.error}`]: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    [`& .${classes.info}`]: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    [`& .${classes.warning}`]: {\n        backgroundColor: amber[700],\n    },\n    [`& .${classes.icon}`]: {\n        fontSize: 20,\n    },\n    [`& .${classes.iconVariant}`]: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    [`& .${classes.message}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    }\n}));\n\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nfunction CustomSnackbar(props) {\n\n    const { className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={cx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={cx(classes.icon, classes.iconVariant)} />\n                    {message}\n        </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={onClose}\n                    size=\"large\">\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nCustomSnackbar.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\nfunction CustomizedSnackbar(props) {\n    const [open, setOpen] = React.useState(true);\n    const {variant, message} = props;\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <StyledSnackbar\n            open={open}\n            autoHideDuration={5000}\n            onClose={handleClose}\n        >\n            <CustomSnackbar\n                onClose={handleClose}\n                variant={variant}\n                message={message}\n            />\n        </StyledSnackbar>\n    );\n}\n\nCustomizedSnackbar.propTypes = {\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n    message: PropTypes.string.isRequired,\n};\n\nexport default CustomizedSnackbar;","import React from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {connect} from 'react-redux';\n\n// Icons\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Fab from '@mui/material/Fab';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\n\n// Custom\n// @ts-ignore\nimport CenteredGrid from \"./CenteredGrid.tsx\";\n// @ts-ignore\nimport SnackbarWrapper from \"./CustomSnackbar.tsx\";\n\n// The reload wrapper component\nfunction ReloadWrapper(props) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    if (loading) {\n        return <CenteredGrid>\n            <CircularProgress/>\n        </CenteredGrid>\n    }\n\n    if (error) {\n        return <>\n            <SnackbarWrapper\n                variant={\"error\"}\n                message={error}\n            />\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>;\n    }\n    \n    return component;\n}\n\n// mapStateToProps(state, ownProps)\nconst mapStateToProps = _state => ({});\nconst mapDispatchToProps = {};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ReloadWrapper);\n"],"names":["CardDialog","React","PREFIX","classes","gameRoot","gameCover","MuiCardActionArea","StyledCard","styled","Card","theme","position","height","zIndex","props","useTheme","t","useTranslation","navigate","useNavigate","game","is_mobile_device","useMediaQuery","breakpoints","down","contextMenuOpen","setContextMenuOpen","label_for_game","gameTitle","title","gameURL","url","local_path","url_type","playlistId","videoId","className","onClick","window","location","href","onContextMenu","event","preventDefault","root","src","imagePath","alt","loading","variant","Suspense","fallback","contextMenuState","gameEntry","gamesCriteria","StyledLatestVideosGallery","only","flexBasis","up","display","flexDirection","rowGap","justifyContent","mapDispatchToProps","get_latest_videos","connect","state","data","latestVideos","items","error","reloadFct","component","container","spacing","style","map","item","children","Grid","direction","alignItems","minHeight","success","info","warning","icon","iconVariant","message","StyledSnackbar","Snackbar","backgroundColor","green","palette","dark","primary","main","amber","fontSize","opacity","marginRight","variantIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","CustomSnackbar","onClose","other","Icon","SnackbarContent","cx","id","action","IconButton","color","size","Close","open","setOpen","handleClose","reason","autoHideDuration","_state","CenteredGrid","CircularProgress","Fab","Autorenew"],"sourceRoot":""}