{"version":3,"file":"static/js/621.116c5bef.chunk.js","mappings":"yQAcMA,EAAaC,EAAAA,MAAW,kBAAM,qDAE9BC,EAAS,YAETC,EAAU,CACZC,SAAS,GAAD,OAAKF,EAAL,aACRG,UAAU,GAAD,OAAKH,EAAL,cACTI,kBAAkB,GAAD,OAAKJ,EAAL,uBAGfK,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAa,oBAExBE,MAFwB,kCAKtBP,EAAQC,UAAa,CACvBO,SAAU,cANc,sBASrBR,EAAQE,WAAc,CACzBO,OAAQ,KAVgB,sBAarBT,EAAQG,mBAAsB,CACjCO,OAAQ,UACRD,OAAQ,IAfgB,KAoB1BE,EAAgB,CAAC,QAAS,SAAU,OACpCC,EAAc,CAChB,MAAS,OACT,OAAU,OACV,IAAO,QAgFX,IA7EA,SAAmBC,GAGf,IAAMN,GAAQO,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,MAGVC,EAAQJ,EAARI,KAEDC,GAAmBC,EAAAA,EAAAA,GAAcZ,EAAMa,YAAYC,KAAK,OAG9D,EAA6CvB,EAAAA,UAAe,GAA5D,eAAOwB,EAAP,KAAuBC,EAAvB,KAIWC,EAEPP,EAFAQ,MACKC,EACLT,EADAU,IAEEC,EAA+B,aAAlBX,EAAKY,SAA0B,aAAeZ,EAAKa,WAAa,UAAYb,EAAKc,QAWhGC,EAIA,CACAC,IAAKhB,EAAKiB,UACVC,IAAKX,GAWT,OAPA,OAAIP,QAAJ,IAAIA,GAAAA,EAAMmB,sBAENJ,EAAWK,OAAQ1B,EACd2B,KAAI,SAAAC,GAAI,gBAAKtB,EAAKuB,aAAV,kBAAgCD,EAAhC,iBAA6C3B,EAAY2B,OACjEE,KAAK,OAIV,UAACrC,EAAD,CAAYsC,UAAW1C,EAAQC,SAA/B,WAEI,SAAC,IAAD,CACI0C,QA9BZ,WACQzB,EACA0B,OAAOC,SAASC,KAAOpB,EAEvBX,EAASa,IA2BLmB,cAAe,SAACC,GACZA,EAAMC,iBACN1B,GAAmB,IAEvBvB,QAAS,CAACkD,KAAMlD,EAAQG,mBAN5B,UAQI,SAAC,IAAD,CACIuC,UAAW1C,EAAQE,UACnBuB,MAAOD,EAFX,UAII,SAAC,KAAD,kBACQQ,GADR,IAGImB,SAAS,SAAC,IAAD,CAAUC,QAAQ,wBAKvC,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACI,SAACzD,EAAD,CAAYoB,KAAMA,EAAMsC,iBAAkB,CAACjC,EAAgBC,Y,wIClG3E,MApBA,SAAqBV,GACjB,IAAO2C,EAAY3C,EAAZ2C,SACP,OACI,SAACC,EAAA,GAAD,CACIC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,eAAe,SACfC,MAAO,CAACC,UAAW,QANvB,SAQKR,K,2MCAPzD,EAAS,qBAETC,EAAU,CACZiE,QAAQ,GAAD,OAAKlE,EAAL,YACPmE,MAAM,GAAD,OAAKnE,EAAL,UACLoE,KAAK,GAAD,OAAKpE,EAAL,SACJqE,QAAQ,GAAD,OAAKrE,EAAL,YACPsE,KAAK,GAAD,OAAKtE,EAAL,SACJuE,YAAY,GAAD,OAAKvE,EAAL,gBACXwE,QAAQ,GAAD,OAAKxE,EAAL,aAGLyE,GAAiBnE,EAAAA,EAAAA,IAAOoE,EAAAA,EAAPpE,EAAiB,kBAEhCE,EAFgC,EAEhCA,MAFgC,mCAK7BP,EAAQiE,SAAY,CACvBS,gBAAiBC,EAAAA,EAAAA,QANe,sBAQ7B3E,EAAQkE,OAAU,CACrBQ,gBAAiBnE,EAAMqE,QAAQV,MAAMW,QATL,sBAW7B7E,EAAQmE,MAAS,CACpBO,gBAAiBnE,EAAMqE,QAAQE,QAAQC,QAZP,sBAc7B/E,EAAQoE,SAAY,CACvBM,gBAAiBM,EAAAA,EAAAA,QAfe,sBAiB7BhF,EAAQqE,MAAS,CACpBY,SAAU,MAlBsB,sBAoB7BjF,EAAQsE,aAAgB,CAC3BY,QAAS,GACTC,YAAa5E,EAAMoD,QAAQ,MAtBK,sBAwB7B3D,EAAQuE,SAAY,CACvBa,QAAS,OACTvB,WAAY,YA1BoB,sBA4B7B7D,EAAQiE,SAAY,CACvBS,gBAAiBC,EAAAA,EAAAA,QA7Be,sBA+B7B3E,EAAQkE,OAAU,CACrBQ,gBAAiBnE,EAAMqE,QAAQV,MAAMW,QAhCL,sBAkC7B7E,EAAQmE,MAAS,CACpBO,gBAAiBnE,EAAMqE,QAAQE,QAAQC,QAnCP,sBAqC7B/E,EAAQoE,SAAY,CACvBM,gBAAiBM,EAAAA,EAAAA,QAtCe,sBAwC7BhF,EAAQqE,MAAS,CACpBY,SAAU,MAzCsB,sBA2C7BjF,EAAQsE,aAAgB,CAC3BY,QAAS,GACTC,YAAa5E,EAAMoD,QAAQ,MA7CK,sBA+C7B3D,EAAQuE,SAAY,CACvBa,QAAS,OACTvB,WAAY,WAjDoB,KAsDlCwB,EAAc,CAChBpB,QAASqB,EAAAA,EACTlB,QAASmB,EAAAA,EACTrB,MAAOsB,EAAAA,EACPrB,KAAMsB,EAAAA,GAGV,SAASC,EAAe7E,GAEpB,IAAQ6B,EAAmD7B,EAAnD6B,UAAW6B,EAAwC1D,EAAxC0D,QAASoB,EAA+B9E,EAA/B8E,QAASvC,EAAsBvC,EAAtBuC,QAAYwC,GAAjD,OAA2D/E,EAA3D,GACMgF,EAAOR,EAAYjC,GAEzB,OACI,SAAC0C,EAAA,GAAD,QACIpD,WAAWqD,EAAAA,EAAAA,IAAG/F,EAAQoD,GAAUV,GAChC,mBAAiB,kBACjB6B,SACI,kBAAMyB,GAAG,kBAAkBtD,UAAW1C,EAAQuE,QAA9C,WACN,SAACsB,EAAD,CAAMnD,WAAWqD,EAAAA,EAAAA,IAAG/F,EAAQqE,KAAMrE,EAAQsE,eAC/BC,KAGT0B,OAAQ,EACJ,SAACC,EAAA,EAAD,CAEI,aAAW,QACXC,MAAM,UACNxD,QAASgD,EACTpD,KAAK,QALT,UAMI,SAAC6D,EAAA,EAAD,CAAW1D,UAAW1C,EAAQqE,QAL1B,WAQRuB,IA4ChB,MAhCA,SAA4B/E,GACxB,MAAwBf,EAAAA,UAAe,GAAvC,eAAOuG,EAAP,KAAaC,EAAb,KACOlD,EAAoBvC,EAApBuC,QAASmB,EAAW1D,EAAX0D,QAEVgC,EAAc,SAACvD,EAAOwD,GACT,cAAXA,GAIJF,GAAQ,IAGZ,OACI,SAAC9B,EAAD,CACI6B,KAAMA,EACNI,iBAAkB,IAClBd,QAASY,EAHb,UAKI,SAACb,EAAD,CACIC,QAASY,EACTnD,QAASA,EACTmB,QAASA,OC9FzB,IAGA,GAAemC,EAAAA,EAAAA,KAHS,SAAAC,GAAM,MAAK,KACR,GAE3B,EAvCA,SAAuB9F,GAEnB,IAAOsC,EAAwCtC,EAAxCsC,QAASe,EAA+BrD,EAA/BqD,MAAO0C,EAAwB/F,EAAxB+F,UAAWC,EAAahG,EAAbgG,UAC1BC,GAAMC,EAAAA,EAAAA,GAAe,UAArBD,EAER,OAAI3D,GACO,SAAC6D,EAAD,WACH,SAACC,EAAA,EAAD,MAIJ/C,GACO,iCACH,SAAC,EAAD,CACId,QAAS,QACTmB,QAASL,KAEb,SAAC8C,EAAD,WACI,UAACE,EAAA,EAAD,CACI9D,QAAQ,WACRb,KAAK,SACL4D,MAAM,UACN,aAAW,SACXxD,QAASkE,EALb,WAOI,SAACM,EAAA,EAAD,IACEL,EAAE,yBAMbF,M,wHCjCL7G,EAAS,eAETC,EAAU,CACZoH,UAAU,GAAD,OAAKrH,EAAL,cACTsH,cAAc,GAAD,OAAKtH,EAAL,mBAGXuH,GAAqBjH,EAAAA,EAAAA,IAAO,MAAPA,EAAc,sBAEjCE,EAFiC,EAEjCA,MAFiC,mCAK9BP,EAAQoH,YALsB,eAMhC7G,EAAMa,YAAYmG,KAAK,MAAQ,CAC5BC,UAAW,2BAPkB,SAShCjH,EAAMa,YAAYmG,KAAK,MAAQ,CAC5BC,UAAW,2BAVkB,SAYhCjH,EAAMa,YAAYmG,KAAK,MAAQ,CAC5BC,UAAW,2BAbkB,SAehCjH,EAAMa,YAAYqG,GAAG,MAAQ,CAC1BD,UAAW,0BAhBkB,2BAmB9BxH,EAAQqH,gBAnBsB,GAoBjCjC,QAAS,SApBwB,SAqBhC7E,EAAMa,YAAYC,KAAK,MAAQ,CAC5BqG,cAAe,SACfC,OAAQ,SAvBqB,SAyBhCpH,EAAMa,YAAYqG,GAAG,MAAQ,CAC1BC,cAAe,MACf5D,eAAgB,aA3Ba,SAiFzC,IAIM8D,EAAqB,CACvBC,UAAAA,EAAAA,IAGJ,WAAenB,EAAAA,EAAAA,KARS,SAAAoB,GAAK,MAAK,CAC9BC,KAAMD,EAAME,MAAMC,SASlBL,EAFJ,EAxDA,SAAsB/G,GAElB,IAAOsC,EAAwBtC,EAAxBsC,QAASe,EAAerD,EAAfqD,MAAO6D,EAAQlH,EAARkH,KAUvB,OAPAjI,EAAAA,WAAgB,WACZe,EAAMgH,cAGN,KAIA,SAAC,IAAD,CACI1E,QAASA,EACTe,MAAOA,EACP2C,UAAW,WAAOhG,EAAMgH,aACxBjB,WACI,SAACU,EAAD,WACI,SAAC,KAAD,CACI5D,WAAS,EACTC,QAAS,EACTI,MACI,CACI4D,OAAQ,QALpB,SAUQI,EACKzF,KAAI,SAAArB,GAAI,aACD,SAAC,KAAD,CAEIiH,MAAI,EACJxF,UAAW1C,EAAQoH,UAHvB,UAKI,SAAC,IAAD,CAAWnG,KAAMA,KALrB,UACSA,EAAKa,kBADd,QAC4Bb,EAAKc","sources":["components/GamesView/CardEntry.tsx","components/Others/CenteredGrid.tsx","components/Others/CustomSnackbar.tsx","components/Others/ReloadWrapper.tsx","components/Tests/TestsGallery.tsx"],"sourcesContent":["import React, {Suspense} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// To check what should happen when clicking on a game\nimport { useTheme, styled } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\nimport Skeleton from '@mui/material/Skeleton';\n\nimport Image from '@jy95/material-ui-image';\n// @ts-ignore\nconst CardDialog = React.lazy(() => import(\"./CardDialog.tsx\"));\n\nconst PREFIX = 'CardEntry';\n\nconst classes = {\n    gameRoot: `${PREFIX}-gameRoot`,\n    gameCover: `${PREFIX}-gameCover`,\n    MuiCardActionArea: `${PREFIX}-MuiCardActionArea`\n};\n\nconst StyledCard = styled(Card)((\n    {\n        theme\n    }\n) => ({\n    [`&.${classes.gameRoot}`]: {\n        position: \"relative\",\n        //height: \"100%\"\n    },\n    [`& .${classes.gameCover}`]: {\n        zIndex: 1,\n        //height: \"inherit\"\n    },\n    [`& .${classes.MuiCardActionArea}`]: {\n        height: \"inherit\",\n        zIndex: 1\n    }\n}));\n\n// for responsive pictures\nconst PICTURE_SIZES = [\"small\", \"medium\", \"big\"];\nconst SIZES_WITDH = {\n    \"small\": \"150w\",\n    \"medium\": \"200w\",\n    \"big\": \"250w\"\n}\n\nfunction CardEntry(props) {\n\n    // hooks\n    const theme = useTheme();\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n\n    const is_mobile_device = useMediaQuery(theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = React.useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.playlistId : \"/video/\" + game.videoId;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    // image properties\n    let imageProps : {\n        src: string,\n        alt: string,\n        srcSet?: string\n    } = {\n        src: game.imagePath,\n        alt: gameTitle\n    };\n\n    // only \n    if (game?.hasResponsiveImages) {\n        // TODO maybe in the future make that stuff more configurable\n        imageProps.srcSet= PICTURE_SIZES\n            .map(size=>`${game.imagesFolder}/cover@${size}.webp ${SIZES_WITDH[size]}`)\n            .join(\",\");\n    }\n\n    return (\n        <StyledCard className={classes.gameRoot}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                classes={{root: classes.MuiCardActionArea}}\n            >\n                <CardMedia\n                    className={classes.gameCover}\n                    title={gameTitle}\n                >\n                    <Image \n                        {...imageProps}\n                        //disableSpinner={true} \n                        loading={<Skeleton variant=\"rectangular\" />}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </StyledCard>\n    );\n}\n\nexport default CardEntry;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from \"@mui/material/Grid\";\n\nfunction CenteredBox(props) {\n    const {children} = props;\n    return (\n        <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            style={{minHeight: '80vh'}}\n        >\n            {children}\n        </Grid>\n    );\n}\n\nCenteredBox.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default CenteredBox;","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { cx } from '@emotion/css';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport InfoIcon from '@mui/icons-material/Info';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { amber, green } from '@mui/material/colors';\nimport IconButton from '@mui/material/IconButton';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport Snackbar from '@mui/material/Snackbar';\nimport SnackbarContent from '@mui/material/SnackbarContent';\n\n\nconst PREFIX = 'CustomizedSnackbar';\n\nconst classes = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    info: `${PREFIX}-info`,\n    warning: `${PREFIX}-warning`,\n    icon: `${PREFIX}-icon`,\n    iconVariant: `${PREFIX}-iconVariant`,\n    message: `${PREFIX}-message`\n};\n\nconst StyledSnackbar = styled(Snackbar)((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.success}`]: {\n        backgroundColor: green[600],\n    },\n    [`& .${classes.error}`]: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    [`& .${classes.info}`]: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    [`& .${classes.warning}`]: {\n        backgroundColor: amber[700],\n    },\n    [`& .${classes.icon}`]: {\n        fontSize: 20,\n    },\n    [`& .${classes.iconVariant}`]: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    [`& .${classes.message}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    [`& .${classes.success}`]: {\n        backgroundColor: green[600],\n    },\n    [`& .${classes.error}`]: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    [`& .${classes.info}`]: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    [`& .${classes.warning}`]: {\n        backgroundColor: amber[700],\n    },\n    [`& .${classes.icon}`]: {\n        fontSize: 20,\n    },\n    [`& .${classes.iconVariant}`]: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    [`& .${classes.message}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    }\n}));\n\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nfunction CustomSnackbar(props) {\n\n    const { className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={cx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={cx(classes.icon, classes.iconVariant)} />\n                    {message}\n        </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={onClose}\n                    size=\"large\">\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nCustomSnackbar.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\nfunction CustomizedSnackbar(props) {\n    const [open, setOpen] = React.useState(true);\n    const {variant, message} = props;\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <StyledSnackbar\n            open={open}\n            autoHideDuration={5000}\n            onClose={handleClose}\n        >\n            <CustomSnackbar\n                onClose={handleClose}\n                variant={variant}\n                message={message}\n            />\n        </StyledSnackbar>\n    );\n}\n\nCustomizedSnackbar.propTypes = {\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n    message: PropTypes.string.isRequired,\n};\n\nexport default CustomizedSnackbar;","import React from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {connect} from 'react-redux';\n\n// Icons\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Fab from '@mui/material/Fab';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\n\n// Custom\n// @ts-ignore\nimport CenteredGrid from \"./CenteredGrid.tsx\";\n// @ts-ignore\nimport SnackbarWrapper from \"./CustomSnackbar.tsx\";\n\n// The reload wrapper component\nfunction ReloadWrapper(props) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    if (loading) {\n        return <CenteredGrid>\n            <CircularProgress/>\n        </CenteredGrid>\n    }\n\n    if (error) {\n        return <>\n            <SnackbarWrapper\n                variant={\"error\"}\n                message={error}\n            />\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>;\n    }\n    \n    return component;\n}\n\n// mapStateToProps(state, ownProps)\nconst mapStateToProps = _state => ({});\nconst mapDispatchToProps = {};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ReloadWrapper);\n","import React from \"react\";\nimport { styled } from '@mui/material/styles';\nimport {connect} from 'react-redux';\n// @ts-ignore\nimport {get_tests} from \"../../actions/tests.tsx\";\n\n// Custom\n// @ts-ignore\nimport ReloadWrapper from \"../Others/ReloadWrapper.tsx\";\n// @ts-ignore\nimport CardEntry from \"../GamesView/CardEntry.tsx\";\n\n// Style\nimport Grid from \"@mui/material/Grid\";\n\nconst PREFIX = 'TestsGallery';\n\nconst classes = {\n    gameEntry: `${PREFIX}-gameEntry`,\n    gamesCriteria: `${PREFIX}-gamesCriteria`\n};\n\nconst StyledTestsGallery = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.gameEntry}`]: {\n        [theme.breakpoints.only('xs')]: {\n            flexBasis: \"calc((100% / 1) - 1%)\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            flexBasis: \"calc((100% / 2) - 1%)\"\n        },\n        [theme.breakpoints.only('md')]: {\n            flexBasis: \"calc((100% / 4) - 1%)\"\n        },\n        [theme.breakpoints.up('lg')]: {\n            flexBasis: \"calc((100% / 5) - 1%)\"\n        },\n    },\n    [`& .${classes.gamesCriteria}`]: {\n        display: \"flex\",\n        [theme.breakpoints.down('md')]: {\n            flexDirection: \"column\",\n            rowGap: \"8px\"\n        },\n        [theme.breakpoints.up('md')]: {\n            flexDirection: \"row\",\n            justifyContent: \"flex-end\"\n        }\n    }\n}));\n\n// The gallery component\nfunction TestsGallery(props) {\n\n    const {loading, error, data} = props;\n\n    // on mount, load data (only once)\n    React.useEffect(() => {\n        props.get_tests();\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper  \n            loading={loading}\n            error={error}\n            reloadFct={() => {props.get_tests();}}\n            component={\n                <StyledTestsGallery>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.playlistId ?? game.videoId} \n                                            item \n                                            className={classes.gameEntry}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </StyledTestsGallery>            \n            }\n        />\n    );\n}\n\n// mapStateToProps(state, ownProps)\nconst mapStateToProps = state => ({\n    data: state.tests.games\n});\n\nconst mapDispatchToProps = {\n    get_tests\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TestsGallery);"],"names":["CardDialog","React","PREFIX","classes","gameRoot","gameCover","MuiCardActionArea","StyledCard","styled","Card","theme","position","zIndex","height","PICTURE_SIZES","SIZES_WITDH","props","useTheme","navigate","useNavigate","game","is_mobile_device","useMediaQuery","breakpoints","down","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","playlistId","videoId","imageProps","src","imagePath","alt","hasResponsiveImages","srcSet","map","size","imagesFolder","join","className","onClick","window","location","href","onContextMenu","event","preventDefault","root","loading","variant","Suspense","fallback","contextMenuState","children","Grid","container","spacing","direction","alignItems","justifyContent","style","minHeight","success","error","info","warning","icon","iconVariant","message","StyledSnackbar","Snackbar","backgroundColor","green","palette","dark","primary","main","amber","fontSize","opacity","marginRight","display","variantIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","CustomSnackbar","onClose","other","Icon","SnackbarContent","cx","id","action","IconButton","color","Close","open","setOpen","handleClose","reason","autoHideDuration","connect","_state","component","reloadFct","t","useTranslation","CenteredGrid","CircularProgress","Fab","Autorenew","gameEntry","gamesCriteria","StyledTestsGallery","only","flexBasis","up","flexDirection","rowGap","mapDispatchToProps","get_tests","state","data","tests","games","item"],"sourceRoot":""}