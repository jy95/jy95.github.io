{"version":3,"file":"static/js/9670.730b523e.chunk.js","mappings":"kOAWMA,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,0BAAN,IA0ExB,IAxEA,SAAmBC,GAMf,IAAMC,GAAWC,EAAAA,EAAAA,MAGVC,EAAQH,EAARG,KACDC,GAAmBC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAiBA,EAAMC,YAAYC,KAAK,KAAxC,IAGxC,GAA6CC,EAAAA,EAAAA,WAAS,GAAtD,eAAOC,EAAP,KAAuBC,EAAvB,KAIWC,EAEPT,EAFAU,MACKC,EACLX,EADAY,IAEEC,EAA+B,aAAlBb,EAAKc,SAA0B,aAAed,EAAKe,GAAK,UAAYf,EAAKe,GAWxFC,EAKA,CACAC,IAAKjB,EAAKkB,UACVC,OAAQnB,EAAKmB,OACbC,IAAKX,EACLY,QAAS,QAGb,OACI,UAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,YAAtB,WAEI,SAAC,IAAD,CACIC,QAzBZ,WACQvB,EACAwB,OAAOC,SAASC,KAAOhB,EAEvBb,EAASe,EAEhB,EAoBWe,cAAe,SAACC,GACZA,EAAMC,iBACNtB,GAAmB,EACtB,EACDc,GAAI,CAAES,OAAQ,UAAWC,OAAQ,GANrC,UAQI,SAAC,IAAD,CACIV,GAAI,CAAEU,OAAQ,GACdtB,MAAOD,EAFX,UAII,SAAC,KAAD,kBACQO,GADR,IAEIiB,gBAAgB,UAK5B,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACI,SAACxC,EAAD,CAAYK,KAAMA,EAAMoC,iBAAkB,CAAC7B,EAAgBC,SAI1E,C,sGCdD,UAxDA,SAA6B6B,GAEzB,IAAMC,GAAwBC,EAAAA,EAAAA,MAC9B,GAIIC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAsBA,EAAMC,YAA5B,GAA0CC,EAAAA,IAHtDtB,EADJ,EACIA,QACAuB,EAFJ,EAEIA,MACOC,EAHX,EAGIC,MAWJ,OAPAC,EAAAA,EAAAA,YAAU,WACNT,GAASU,EAAAA,EAAAA,KACZ,GAEG,KAIA,SAAC,IAAD,CACI3B,QAASA,EACTuB,MAAOA,EACPK,UAAW,WAAOX,GAASU,EAAAA,EAAAA,KAAsB,EACjDE,WACI,0BACI,SAAC,KAAD,CACIC,WAAS,EACTC,QAAS,EACTC,MACI,CACIC,OAAQ,QALpB,SAUQT,EACKU,KAAI,SAAAvD,GAAI,OACD,SAAC,KAAD,CAEIwD,MAAI,EACJC,GAAI,GACJC,GAAI,EACJC,GAAI,EAEJC,GAAI,IAPR,UASI,SAAC,IAAD,CAAW5D,KAAMA,KARZA,EAAK6D,QAFb,SAmBxC,C,wDC/DKC,GAAmBlE,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IACxBmE,GAAMnE,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IACXoE,GAAgBpE,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IAGrBqE,GAAerE,EAAAA,EAAAA,OAAK,kBAAM,uDAAN,IAkC1B,IA/BA,SAAuBC,GAQnB,IAAOwB,EAAwCxB,EAAxCwB,QAASuB,EAA+B/C,EAA/B+C,MAAOM,EAAwBrD,EAAxBqD,UAAWD,EAAapD,EAAboD,UAC1BiB,GAAMC,EAAAA,EAAAA,GAAe,UAArBD,EAER,OAAO,UAAC,EAAAhC,SAAD,CAAUC,SAAU,KAApB,UACFd,IAAW,SAAC4C,EAAD,WAAc,SAACH,EAAD,MACzBlB,IAAS,+BACN,SAACqB,EAAD,WACI,UAACF,EAAD,CACIK,QAAQ,WACRC,KAAK,SACLC,MAAM,UACN,aAAW,SACX9C,QAASyB,EALb,WAOI,SAACe,EAAD,IACEE,EAAE,yBAIX7C,IAAYuB,IAAU,8BAAGM,MAErC,C","sources":["components/GamesView/CardEntry.tsx","components/LatestVideos/LatestVideosGallery.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\nimport type { CardGame } from \"../../services/sharedDefintion\";\nconst CardDialog = lazy(() => import(\"./CardDialog\"));\n\nfunction CardEntry(props : {\n    game: CardGame;\n    [key: string | number | symbol] : any;\n}) {\n\n    // hooks\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n    const is_mobile_device = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    // image properties\n    let imageProps : {\n        src: string,\n        alt: string,\n        srcSet?: string,\n        loading: 'lazy' | 'eager'\n    } = {\n        src: game.imagePath,\n        srcSet: game.srcSet,\n        alt: gameTitle,\n        loading: \"lazy\"\n    };\n\n    return (\n        <Card sx={{ position: \"relative\" }}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                sx={{ height: \"inherit\", zIndex: 1 }}\n            >\n                <CardMedia\n                    sx={{ zIndex: 1 }}\n                    title={gameTitle}\n                >\n                    <Image \n                        {...imageProps}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </Card>\n    );\n}\n\nexport default CardEntry;","import { useEffect } from \"react\";\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport Grid from \"@mui/material/Grid\";\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\nimport CardEntry from \"../GamesView/CardEntry\";\n\n// Redux\nimport { fetchLatestVideos } from \"../../services/latestVideosSlice\";\nimport type { RootState, AppDispatch } from '../Store';\n\n// The gallery component\nfunction LatestVideosGallery(_props : {[key: string | number | symbol] : any}) {\n\n    const dispatch: AppDispatch = useDispatch();\n    const {\n        loading,\n        error,\n        items: data\n    } = useSelector((state: RootState) => state.latestVideos, shallowEqual);\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchLatestVideos());\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchLatestVideos());}}\n            component={\n                <div>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.videoId} \n                                            item \n                                            xs={12}\n                                            sm={6}\n                                            md={3}\n                                            // 5 items for this screen size\n                                            lg={2.4}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </div>\n            }\n        />\n    );\n}\n\nexport default LatestVideosGallery;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n"],"names":["CardDialog","lazy","props","navigate","useNavigate","game","is_mobile_device","useMediaQuery","theme","breakpoints","down","useState","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","imageProps","src","imagePath","srcSet","alt","loading","sx","position","onClick","window","location","href","onContextMenu","event","preventDefault","height","zIndex","disableSpinner","Suspense","fallback","contextMenuState","_props","dispatch","useDispatch","useSelector","state","latestVideos","shallowEqual","error","data","items","useEffect","fetchLatestVideos","reloadFct","component","container","spacing","style","rowGap","map","item","xs","sm","md","lg","videoId","CircularProgress","Fab","AutorenewIcon","CenteredGrid","t","useTranslation","variant","size","color"],"sourceRoot":""}