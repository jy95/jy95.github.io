{"version":3,"file":"static/js/9670.1eae95c2.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/LatestVideos/LatestVideosGallery.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// To check what should happen when clicking on a game\nimport { useTheme, styled } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\n// @ts-ignore\nconst CardDialog = lazy(() => import(\"./CardDialog.tsx\"));\n\nconst PREFIX = 'CardEntry';\n\nconst classes = {\n    gameRoot: `${PREFIX}-gameRoot`,\n    gameCover: `${PREFIX}-gameCover`,\n    MuiCardActionArea: `${PREFIX}-MuiCardActionArea`\n};\n\nconst StyledCard = styled(Card)((\n    {\n        theme\n    }\n) => ({\n    [`&.${classes.gameRoot}`]: {\n        position: \"relative\",\n        //height: \"100%\"\n    },\n    [`& .${classes.gameCover}`]: {\n        zIndex: 1,\n        //height: \"inherit\"\n    },\n    [`& .${classes.MuiCardActionArea}`]: {\n        height: \"inherit\",\n        zIndex: 1\n    }\n}));\n\n// for responsive pictures\nconst PICTURE_SIZES = [\"small\", \"medium\", \"big\"];\nconst SIZES_WITDH = {\n    \"small\": \"150w\",\n    \"medium\": \"200w\",\n    \"big\": \"250w\"\n}\n\nfunction CardEntry(props) {\n\n    // hooks\n    const theme = useTheme();\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n\n    const is_mobile_device = useMediaQuery(theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.playlistId : \"/video/\" + game.videoId;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    // image properties\n    let imageProps : {\n        src: string,\n        alt: string,\n        srcSet?: string\n    } = {\n        src: game.imagePath,\n        alt: gameTitle\n    };\n\n    // only \n    if (game?.hasResponsiveImages) {\n        // TODO maybe in the future make that stuff more configurable\n        imageProps.srcSet= PICTURE_SIZES\n            .map(size=>`${game.imagesFolder}/cover@${size}.webp ${SIZES_WITDH[size]}`)\n            .join(\",\");\n    }\n\n    return (\n        <StyledCard className={classes.gameRoot}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                classes={{root: classes.MuiCardActionArea}}\n            >\n                <CardMedia\n                    className={classes.gameCover}\n                    title={gameTitle}\n                >\n                    <Image \n                        {...imageProps}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </StyledCard>\n    );\n}\n\nexport default CardEntry;","import { useEffect } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from \"@mui/material/Grid\";\n\n// Custom\n// @ts-ignore\nimport ReloadWrapper from \"../Others/ReloadWrapper.tsx\";\n\n// @ts-ignore\nimport CardEntry from \"../GamesView/CardEntry.tsx\";\n\n// Redux\n// @ts-ignore\nimport { fetchLatestVideos } from \"../../services/latestVideosSlice.tsx\";\n// @ts-ignore\nimport type { RootState, AppDispatch } from '../Store.tsx';\n\nconst PREFIX = 'LatestVideosGallery';\n\nconst classes = {\n    gameEntry: `${PREFIX}-gameEntry`,\n    gamesCriteria: `${PREFIX}-gamesCriteria`\n};\n\nconst StyledLatestVideosGallery = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.gameEntry}`]: {\n        [theme.breakpoints.only('xs')]: {\n            flexBasis: \"calc((100% / 1) - 1%)\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            flexBasis: \"calc((100% / 2) - 1%)\"\n        },\n        [theme.breakpoints.only('md')]: {\n            flexBasis: \"calc((100% / 4) - 1%)\"\n        },\n        [theme.breakpoints.up('lg')]: {\n            flexBasis: \"calc((100% / 5) - 1%)\"\n        },\n    },\n    [`& .${classes.gamesCriteria}`]: {\n        display: \"flex\",\n        [theme.breakpoints.down('md')]: {\n            flexDirection: \"column\",\n            rowGap: \"8px\"\n        },\n        [theme.breakpoints.up('md')]: {\n            flexDirection: \"row\",\n            justifyContent: \"flex-end\"\n        }\n    }\n}));\n\n// The gallery component\nfunction LatestVideosGallery(props) {\n\n    const dispatch: AppDispatch = useDispatch();\n    const loading = useSelector((state: RootState) => state.latestVideos.loading);\n    const error = useSelector((state: RootState) => state.latestVideos.error);\n    const data = useSelector((state: RootState) => state.latestVideos.items);\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchLatestVideos());\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchLatestVideos());}}\n            component={\n                <StyledLatestVideosGallery>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.videoId} \n                                            item \n                                            className={classes.gameEntry}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </StyledLatestVideosGallery>            \n            }\n        />\n    );\n}\n\nexport default LatestVideosGallery;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n// For snackbars\nimport { useSnackbar } from 'notistack';\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\n// @ts-ignore\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid.tsx\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props) {\n\n    const {loading, error, component, reloadFct} = props as {\n        loading: boolean;\n        error: Error | undefined;\n        reloadFct: () => any;\n        component: JSX.Element;\n        [key: string]: any;\n    };\n    const { t } = useTranslation('common');\n    const { enqueueSnackbar } = useSnackbar();\n\n    const RealComponent = () => {\n        return component;\n    }\n\n    if (error){\n        enqueueSnackbar(\n            error.message,\n            {\n                variant: 'error'\n            }\n        )\n    }\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( (loading === false) && !error) && <RealComponent /> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n"],"names":["CardDialog","lazy","PREFIX","classes","gameRoot","gameCover","MuiCardActionArea","StyledCard","styled","Card","theme","position","zIndex","height","PICTURE_SIZES","SIZES_WITDH","props","useTheme","navigate","useNavigate","game","is_mobile_device","useMediaQuery","breakpoints","down","useState","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","playlistId","videoId","imageProps","src","imagePath","alt","hasResponsiveImages","srcSet","map","size","imagesFolder","join","className","onClick","window","location","href","onContextMenu","event","preventDefault","root","disableSpinner","Suspense","fallback","contextMenuState","gameEntry","gamesCriteria","StyledLatestVideosGallery","only","flexBasis","up","display","flexDirection","rowGap","justifyContent","dispatch","useDispatch","loading","useSelector","state","latestVideos","error","data","items","useEffect","fetchLatestVideos","reloadFct","component","container","spacing","style","item","CircularProgress","Fab","AutorenewIcon","CenteredGrid","t","useTranslation","enqueueSnackbar","useSnackbar","RealComponent","message","variant","color"],"sourceRoot":""}