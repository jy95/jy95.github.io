{"version":3,"file":"static/js/8018.2f794c00.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/GamesView/GamesGalleryList.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\nimport type { CardGame } from \"../../services/sharedDefintion\";\nconst CardDialog = lazy(() => import(\"./CardDialog\"));\n\nfunction CardEntry(props : {\n    game: CardGame;\n    [key: string | number | symbol] : any;\n}) {\n\n    // hooks\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n    const is_mobile_device = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    return (\n        <Card sx={{ position: \"relative\" }}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                sx={{ height: \"inherit\", zIndex: 1 }}\n            >\n                <CardMedia\n                    sx={{ zIndex: 1 }}\n                    title={gameTitle}\n                >\n                    <Image \n                        src={game.imagePath}\n                        srcSet={game.srcSet}\n                        sizes={game.sizes}\n                        alt={gameTitle}\n                        loading={\"lazy\"}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </Card>\n    );\n}\n\nexport default CardEntry;","import { Suspense, lazy, useEffect } from \"react\";\n\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Grid from \"@mui/material/Grid\";\n\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\nimport CardEntry from \"./CardEntry\";\nimport { fetchSeries, selectSeries } from \"../../services/seriesSlice\";\n\nconst AccordionDetails = lazy(() => import(\"@mui/material/AccordionDetails\"));\n\n// The gallery component\nfunction GamesGalleryList(_props : {[key: string | number | symbol] : any}) {\n\n    const dispatch = useAppDispatch();\n    const {\n        loading,\n        error,\n        series: data\n    } = useAppSelector((state) => selectSeries(state));\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchSeries());\n    },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchSeries());}}\n            component={\n                <div>\n                    {\n                        data.map(serie => \n                            <Accordion key={serie.name}>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls={\"panel-content\" + serie.name}\n                                    id={\"panel-header\" + serie.name}\n                                >\n                                    <Typography>{serie.name}</Typography>\n                                </AccordionSummary>\n                                <Suspense fallback={null}>\n                                    <AccordionDetails>\n                                        <Grid\n                                            container\n                                            spacing={1}\n                                            style={\n                                                {\n                                                    rowGap: \"15px\"\n                                                }\n                                            }\n                                        >\n                                            {\n                                                serie\n                                                    .items\n                                                    .map(game => \n                                                            <Grid \n                                                                key={game.id}\n                                                                item \n                                                                xs={6}\n                                                                md={4}\n                                                                lg={1.5}\n                                                            >\n                                                                <CardEntry game={game}/>\n                                                            </Grid>\n                                                    )\n                                            }\n                                        </Grid> \n                                    </AccordionDetails>\n                                </Suspense>\n                            </Accordion>\n                        )\n                    }\n                </div>\n            }\n        />\n    )\n}\n\nexport default GamesGalleryList;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n"],"names":["CardDialog","lazy","props","navigate","useNavigate","game","is_mobile_device","useMediaQuery","theme","breakpoints","down","_useState","useState","_useState2","_slicedToArray","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","_jsxs","Card","sx","position","children","_jsx","CardActionArea","onClick","window","location","href","onContextMenu","event","preventDefault","height","zIndex","CardMedia","Image","src","imagePath","srcSet","sizes","alt","loading","disableSpinner","Suspense","fallback","contextMenuState","AccordionDetails","_props","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","selectSeries","error","data","series","useEffect","fetchSeries","ReloadWrapper","reloadFct","component","map","serie","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","name","Typography","Grid","container","spacing","style","rowGap","items","item","xs","md","lg","CardEntry","CircularProgress","Fab","AutorenewIcon","CenteredGrid","t","useTranslation","_Fragment","variant","size","color"],"sourceRoot":""}