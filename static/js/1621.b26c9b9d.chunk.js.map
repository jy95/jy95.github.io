{"version":3,"file":"static/js/1621.b26c9b9d.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/Others/ReloadWrapper.tsx","components/Tests/TestsGallery.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\nimport type { CardGame } from \"../../services/sharedDefintion\";\nconst CardDialog = lazy(() => import(\"./CardDialog\"));\n\nfunction CardEntry(props : {\n    game: CardGame;\n    [key: string | number | symbol] : any;\n}) {\n\n    // hooks\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n    const is_mobile_device = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    return (\n        <Card sx={{ position: \"relative\" }}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                sx={{ height: \"inherit\", zIndex: 1 }}\n            >\n                <CardMedia\n                    sx={{ zIndex: 1 }}\n                    title={gameTitle}\n                >\n                    <Image \n                        src={game.imagePath}\n                        srcSet={game.srcSet}\n                        sizes={game.sizes}\n                        alt={gameTitle}\n                        loading={\"lazy\"}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </Card>\n    );\n}\n\nexport default CardEntry;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n","import { useEffect } from \"react\";\n\n// Style\nimport Grid from \"@mui/material/Grid\";\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\nimport CardEntry from \"../GamesView/CardEntry\";\nimport { fetchTests, selectTests } from \"../../services/testsSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// The gallery component\nfunction TestsGallery(_props : {[key: string | number | symbol] : any}) {\n\n    const dispatch = useAppDispatch();\n    const {\n        loading,\n        error,\n        games: data\n    } = useAppSelector((state) => selectTests(state));\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchTests());\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper  \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchTests());}}\n            component={\n                <div>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.id}\n                                            item \n                                            xs={12}\n                                            sm={6}\n                                            md={3}\n                                            // 5 items for this screen size\n                                            lg={2.4}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </div>\n            }\n        />\n    );\n}\n\nexport default TestsGallery;"],"names":["CardDialog","lazy","props","navigate","useNavigate","game","is_mobile_device","useMediaQuery","theme","breakpoints","down","_useState","useState","_useState2","_slicedToArray","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","_jsxs","Card","sx","position","children","_jsx","CardActionArea","onClick","window","location","href","onContextMenu","event","preventDefault","height","zIndex","CardMedia","Image","src","imagePath","srcSet","sizes","alt","loading","disableSpinner","Suspense","fallback","contextMenuState","CircularProgress","Fab","AutorenewIcon","CenteredGrid","error","component","reloadFct","t","useTranslation","_Fragment","variant","size","color","_props","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","selectTests","data","games","useEffect","fetchTests","ReloadWrapper","Grid","container","spacing","style","rowGap","map","item","xs","sm","md","lg","CardEntry"],"sourceRoot":""}