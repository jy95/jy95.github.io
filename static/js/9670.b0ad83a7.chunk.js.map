{"version":3,"file":"static/js/9670.b0ad83a7.chunk.js","mappings":"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","sources":["components/GamesView/CardEntry.tsx","components/LatestVideos/LatestVideosGallery.tsx","components/Others/ReloadWrapper.tsx"],"sourcesContent":["import { Suspense, useState, lazy } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { styled } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardActionArea from '@mui/material/CardActionArea';\n\nimport Image from '@jy95/material-ui-image';\nimport type { CardGame } from \"../../services/sharedDefintion\";\nconst CardDialog = lazy(() => import(\"./CardDialog\"));\n\nconst PREFIX = 'CardEntry';\n\nconst classes = {\n    gameRoot: `${PREFIX}-gameRoot`,\n    gameCover: `${PREFIX}-gameCover`,\n    MuiCardActionArea: `${PREFIX}-MuiCardActionArea`\n};\n\nconst StyledCard = styled(Card)((\n    {\n        theme\n    }\n) => ({\n    [`&.${classes.gameRoot}`]: {\n        position: \"relative\",\n        //height: \"100%\"\n    },\n    [`& .${classes.gameCover}`]: {\n        zIndex: 1,\n        //height: \"inherit\"\n    },\n    [`& .${classes.MuiCardActionArea}`]: {\n        height: \"inherit\",\n        zIndex: 1\n    }\n}));\n\n// for responsive pictures\nconst SIZES_WITDH = {\n    \"small\": \"150w\",\n    \"medium\": \"200w\",\n    \"big\": \"250w\"\n}\n\nfunction CardEntry(props : {\n    game: CardGame;\n    [key: string | number | symbol] : any;\n}) {\n\n    // hooks\n    const navigate = useNavigate();\n\n    // props\n    const {game} = props;\n    const is_mobile_device = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n\n    // state of context menu\n    const [contextMenuOpen,setContextMenuOpen] = useState(false);\n    \n    // consts\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    function watchGame() {\n        if (is_mobile_device) {\n            window.location.href = gameURL;\n        } else {\n            navigate(local_path);\n        }\n    }\n\n    // image properties\n    let imageProps : {\n        src: string,\n        alt: string,\n        srcSet?: string,\n        loading: 'lazy' | 'eager'\n    } = {\n        src: game.imagePath,\n        alt: gameTitle,\n        loading: \"lazy\"\n    };\n\n    // only \n    if (game?.hasResponsiveImages) {\n        // TODO maybe in the future make that stuff more configurable\n        imageProps.srcSet = Object\n            .entries(SIZES_WITDH)\n            .map( ([size, param]) =>`${game.imagesFolder}/cover@${size}.webp ${param}`)\n            .join(\",\");\n    }\n\n    return (\n        <StyledCard className={classes.gameRoot}>\n\n            <CardActionArea \n                onClick={watchGame}\n                onContextMenu={(event) => {\n                    event.preventDefault();\n                    setContextMenuOpen(true);\n                }}\n                classes={{root: classes.MuiCardActionArea}}\n            >\n                <CardMedia\n                    className={classes.gameCover}\n                    title={gameTitle}\n                >\n                    <Image \n                        {...imageProps}\n                        disableSpinner={true}\n                    />\n                </CardMedia>\n\n            </CardActionArea>\n            <Suspense fallback={null}>\n                <CardDialog game={game} contextMenuState={[contextMenuOpen,setContextMenuOpen]} />\n            </Suspense>\n        </StyledCard>\n    );\n}\n\nexport default CardEntry;","import { useEffect } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from \"@mui/material/Grid\";\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\nimport CardEntry from \"../GamesView/CardEntry\";\n\n// Redux\nimport { fetchLatestVideos } from \"../../services/latestVideosSlice\";\nimport type { RootState, AppDispatch } from '../Store';\n\nconst PREFIX = 'LatestVideosGallery';\n\nconst classes = {\n    gameEntry: `${PREFIX}-gameEntry`,\n    gamesCriteria: `${PREFIX}-gamesCriteria`\n};\n\nconst StyledLatestVideosGallery = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.gameEntry}`]: {\n        [theme.breakpoints.only('xs')]: {\n            flexBasis: \"calc((100% / 1) - 1%)\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            flexBasis: \"calc((100% / 2) - 1%)\"\n        },\n        [theme.breakpoints.only('md')]: {\n            flexBasis: \"calc((100% / 4) - 1%)\"\n        },\n        [theme.breakpoints.up('lg')]: {\n            flexBasis: \"calc((100% / 5) - 1%)\"\n        },\n    },\n    [`& .${classes.gamesCriteria}`]: {\n        display: \"flex\",\n        [theme.breakpoints.down('md')]: {\n            flexDirection: \"column\",\n            rowGap: \"8px\"\n        },\n        [theme.breakpoints.up('md')]: {\n            flexDirection: \"row\",\n            justifyContent: \"flex-end\"\n        }\n    }\n}));\n\n// The gallery component\nfunction LatestVideosGallery(_props : {[key: string | number | symbol] : any}) {\n\n    const dispatch: AppDispatch = useDispatch();\n    const loading = useSelector((state: RootState) => state.latestVideos.loading);\n    const error = useSelector((state: RootState) => state.latestVideos.error);\n    const data = useSelector((state: RootState) => state.latestVideos.items);\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchLatestVideos());\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    return (\n        <ReloadWrapper \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchLatestVideos());}}\n            component={\n                <StyledLatestVideosGallery>    \n                    <Grid\n                        container\n                        spacing={1}\n                        style={\n                            {\n                                rowGap: \"15px\"\n                            }\n                        }\n                    >\n                        {\n                            data\n                                .map(game => \n                                        <Grid \n                                            key={game.videoId} \n                                            item \n                                            className={classes.gameEntry}\n                                        >\n                                            <CardEntry game={game}/>\n                                        </Grid>\n                                )\n                        }\n                    </Grid>\n                </StyledLatestVideosGallery>            \n            }\n        />\n    );\n}\n\nexport default LatestVideosGallery;","import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n"],"names":["CardDialog","lazy","PREFIX","classes","gameRoot","gameCover","MuiCardActionArea","StyledCard","styled","Card","theme","position","zIndex","height","SIZES_WITDH","props","navigate","useNavigate","game","is_mobile_device","useMediaQuery","breakpoints","down","useState","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","imageProps","src","imagePath","alt","loading","hasResponsiveImages","srcSet","Object","entries","map","size","param","imagesFolder","join","className","onClick","window","location","href","onContextMenu","event","preventDefault","root","disableSpinner","Suspense","fallback","contextMenuState","gameEntry","gamesCriteria","StyledLatestVideosGallery","only","flexBasis","up","display","flexDirection","rowGap","justifyContent","_props","dispatch","useDispatch","useSelector","state","latestVideos","error","data","items","useEffect","fetchLatestVideos","reloadFct","component","container","spacing","style","item","videoId","CircularProgress","Fab","AutorenewIcon","CenteredGrid","t","useTranslation","variant","color"],"sourceRoot":""}