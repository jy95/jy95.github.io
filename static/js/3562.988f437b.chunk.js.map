{"version":3,"file":"static/js/3562.988f437b.chunk.js","mappings":"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","sources":["components/Others/ReloadWrapper.tsx","components/Stats/StatsPage.tsx"],"sourcesContent":["import { Suspense, lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Icons\nconst CircularProgress = lazy(() => import(\"@mui/material/CircularProgress\"));\nconst Fab = lazy(() => import(\"@mui/material/Fab\"));\nconst AutorenewIcon = lazy(() => import(\"@mui/icons-material/Autorenew\"));\n\n// Custom\nconst CenteredGrid = lazy(() => import(\"./CenteredGrid\"));\n\n// The reload wrapper component\nfunction ReloadWrapper(props : {\n    loading: boolean;\n    error: Error | null | undefined;\n    reloadFct: () => any;\n    component: JSX.Element;\n    [key: string | number | symbol] : any\n}) {\n\n    const {loading, error, component, reloadFct} = props;\n    const { t } = useTranslation('common');\n\n    return <Suspense fallback={null}>\n        {loading && <CenteredGrid><CircularProgress/></CenteredGrid>}\n        {error && <>\n            <CenteredGrid>\n                <Fab\n                    variant=\"extended\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    aria-label=\"reload\"\n                    onClick={reloadFct}\n                >\n                    <AutorenewIcon/>\n                    { t(\"common.reload\") }\n                </Fab>\n            </CenteredGrid>\n        </>}\n        { ( !loading && !error) && <>{component}</> }\n    </Suspense>\n}\n\nexport default ReloadWrapper;\n","import { useEffect, Suspense } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { \n    BarChart, \n    Bar, \n    XAxis, \n    YAxis, \n    CartesianGrid, \n    Tooltip, \n    PolarAngleAxis, \n    PolarGrid, \n    Radar, \n    RadarChart, \n    ResponsiveContainer,\n    Legend\n} from 'recharts';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\n\nimport SportsEsportsIcon from '@mui/icons-material/SportsEsports';\nimport HourglassFullIcon from '@mui/icons-material/HourglassFull';\nimport HourglassBottomIcon from '@mui/icons-material/HourglassBottom';\nimport HourglassTopIcon from '@mui/icons-material/HourglassTop';\nimport YouTubeIcon from '@mui/icons-material/YouTube';\n\n// Custom\nimport ReloadWrapper from \"../Others/ReloadWrapper\";\n\nimport { fetchStats, selectStats } from \"../../services/statsSlice\";\n// Hooks\nimport { useAppDispatch, useAppSelector } from \"../../hooks/typedRedux\";\n\n// types\nimport type { Genre as GenreValue } from \"../../services/sharedDefintion\";\nimport type { TFunction } from \"i18next\";\n\n// Inspired by https://blog.bitsrc.io/calculate-the-difference-between-two-2-dates-e1d76737c05a\n// My version includes some improvements in the codebase & changes to fit my needs\nfunction calcDate(date1 : string,  t : TFunction<\"common\", undefined>) {\n\n    //new date instance\n    const dt_date1 = new Date(date1);\n    const dt_date2 = new Date();\n\n    //Get the Timestamp\n    const date1_time_stamp = dt_date1.getTime();\n    const date2_time_stamp = dt_date2.getTime();\n\n    let calc;\n\n    //Check which timestamp is greater\n    if (date1_time_stamp > date2_time_stamp) {\n        calc = new Date(date1_time_stamp - date2_time_stamp);\n    } else {\n        calc = new Date(date2_time_stamp - date1_time_stamp);\n    }\n    //Retrieve the date, month and year\n    const calcFormatTmp = calc.getDate() + '-' + (calc.getMonth() + 1) + '-' + calc.getFullYear();\n    //Convert to an array and store\n    const calcFormat = calcFormatTmp.split(\"-\");\n    //Subtract each member of our array from the default date\n    const days_passed = Number(Math.abs(Number(calcFormat[0])) - 1);\n    const months_passed = Number(Math.abs(Number(calcFormat[1])) - 1);\n    const years_passed = Number(Math.abs(Number(calcFormat[2])) - 1970);\n\n    //Convert to days and sum together\n    const total_days = (years_passed * 365) + (months_passed * 30.417) + days_passed;\n    const total_secs = total_days * 24 * 60 * 60;\n    const total_mins = total_days * 24 * 60;\n    const total_hours = total_days * 24;\n    const total_weeks = ( total_days >= 7 ) ? total_days / 7 : 0;\n\n    //display result with custom text\n    const result = [\n        t(\"common.dates.years\", {count: years_passed}),\n        t(\"common.dates.months\", {count: months_passed}),\n        t(\"common.dates.days\", {count: days_passed})\n    ].join(\" \");\n\n    //return the result\n    return {\n        \"total_days\": Math.round(total_days),\n        \"total_weeks\": Math.round(total_weeks),\n        \"total_hours\" : Math.round(total_hours),\n        \"total_minutes\" : Math.round(total_mins),\n        \"total_seconds\": Math.round(total_secs),\n        \"result\": result.trim()\n    }\n}\n\n// Pretty print duration\nfunction pretty_duration(contentDuration : {\n    hours: number,\n    minutes: number,\n    seconds: number\n}, t : TFunction<\"common\", undefined>) {\n\n    return [\n        t(\"common.dates.hours\", {count: contentDuration.hours}),\n        t(\"common.dates.minutes\", {count: contentDuration.minutes}),\n        t(\"common.dates.seconds\", {count: contentDuration.seconds})\n    ].join(\" \");\n}\n\n// The gallery component\nfunction StatsPage(_props : {[key: string | number | symbol] : any}) {\n\n    const { t } = useTranslation('common');\n    const dispatch = useAppDispatch();\n    const {\n        loading,\n        error,\n        stats\n    } = useAppSelector((state) => selectStats(state));\n    const currentColor = useAppSelector( (state) => state.themeColor.currentColor )\n\n    // on mount, load data (only once)\n    useEffect(() => {\n        dispatch(fetchStats());\n    }, \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    );\n\n    // for genre chart\n    const genresData = stats.genres.map(s => ({\n        ...s,\n        category: t(`gamesLibrary.gamesGenres.${s.key as GenreValue}` as const)\n    }));\n\n    // StackedAreaChart : https://recharts.org/en-US/examples/StackedAreaChart\n    // StackedBarChart : https://recharts.org/en-US/examples/StackedBarChart\n\n    // for platform chart\n    const platformsData = stats.platforms;\n\n    // for generals line\n    const generalStats = stats.general;\n\n    const strokeColor = (currentColor === \"dark\") ? \"white\": \"dark\";    \n\n    // TODO\n    return (\n        <ReloadWrapper  \n            loading={loading}\n            error={error}\n            reloadFct={() => {dispatch(fetchStats());}}\n            component={\n                <Grid container spacing={3}>\n                    <Grid item xs={12} md={12} lg={12}>\n                        <Paper\n                            sx={{\n                                p: 2,\n                                display: 'flex',\n                                flexDirection: 'column'\n                            }}\n                        >\n                            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>{t(\"stats.generalStats.title\")}</Typography>\n                            <List>\n\n                                <Accordion key={\"total_games\"}>\n                                    <AccordionSummary\n                                            expandIcon={<ExpandMoreIcon />}\n                                            aria-controls={\"panel-content_total_games\"}\n                                            id={\"panel-header_total_games\"}\n                                        >\n                                            <ListItemAvatar>\n                                                <Avatar>\n                                                    <SportsEsportsIcon />\n                                                </Avatar>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={t(\"stats.generalStats.total_games\")} secondary={generalStats.total} />\n                                    </AccordionSummary>\n                                    <Suspense fallback={null}>\n                                        <List>\n\n                                            <ListItem>\n                                                    <ListItemAvatar>\n                                                    <Avatar>\n                                                        <SportsEsportsIcon />\n                                                    </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText primary={t(\"stats.generalStats.total_games_available\")} secondary={generalStats.total_available} />\n                                            </ListItem>\n\n                                            <ListItem>\n                                                    <ListItemAvatar>\n                                                    <Avatar>\n                                                        <SportsEsportsIcon />\n                                                    </Avatar>\n                                                    </ListItemAvatar>\n                                                    <ListItemText primary={t(\"stats.generalStats.total_games_unavailable\")} secondary={generalStats.total_unavailable} />\n                                            </ListItem>\n\n                                        </List>\n                                    </Suspense>\n                                </Accordion>\n\n                                <Accordion key={\"total_duration\"}>\n                                    <AccordionSummary\n                                        expandIcon={<ExpandMoreIcon />}\n                                        aria-controls={\"panel-content_total_duration\"}\n                                        id={\"panel-header_total_duration\"}\n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <HourglassFullIcon />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText primary={t(\"stats.generalStats.total_duration\")} secondary={pretty_duration(generalStats.total_time, t)} />\n                                    </AccordionSummary>\n                                    <Suspense fallback={null}>\n                                        <List>\n\n                                            <ListItem>\n                                                <ListItemAvatar>\n                                                <Avatar>\n                                                    <HourglassBottomIcon />\n                                                </Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={t(\"stats.generalStats.total_duration_available\")} secondary={pretty_duration(generalStats.total_time_available, t)} />\n                                            </ListItem>\n\n                                            <ListItem>\n                                                <ListItemAvatar>\n                                                <Avatar>\n                                                    <HourglassTopIcon />\n                                                </Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={t(\"stats.generalStats.total_duration_unavailable\")} secondary={pretty_duration(generalStats.total_time_unavailable, t)} />\n                                            </ListItem>\n\n                                        </List>\n                                    </Suspense>\n                                </Accordion>\n\n                                <ListItem>\n                                    <ListItemAvatar>\n                                    <Avatar>\n                                        <YouTubeIcon />\n                                    </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText primary={t(\"stats.generalStats.channel_start_date\")} secondary={`${new Date(generalStats.channel_start_date).toLocaleDateString()} ${t(\"stats.generalStats.channel_start_date_details\", {value: calcDate(generalStats.channel_start_date, t).result})}`} />\n                                </ListItem>\n                            </List>\n                        </Paper>\n                    </Grid>\n                    {\n                        genresData.length > 0 &&\n                        <Grid item xs={12} md={8} lg={8}>\n                            <Paper\n                                sx={{\n                                    p: 2,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    height: 360,\n                                }}\n                            >\n                                <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>{t(\"stats.genresChart.title\")}</Typography>\n                                <ResponsiveContainer>\n                                    <BarChart data={genresData}>\n                                        <CartesianGrid strokeDasharray=\"2 2\" />\n                                        <XAxis dataKey=\"category\" stroke={strokeColor} />\n                                        <YAxis stroke={strokeColor}  />\n                                        <Tooltip contentStyle={{backgroundColor: currentColor}} />\n                                        <Bar type=\"monotone\" dataKey=\"total_available\" stackId=\"1\" stroke=\"#82ca9d\" fill=\"#82ca9d\" name={t(\"stats.genresChart.total_available\")} />\n                                        <Bar type=\"monotone\" dataKey=\"total_unavailable\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" name={t(\"stats.genresChart.total_unavailable\")} />\n                                    </BarChart>\n                                </ResponsiveContainer>\n                            </Paper>\n                        </Grid>\n                    }\n                    { \n                        platformsData.length > 0 &&\n                        <Grid item xs={12} md={4} lg={4}>\n                            <Paper\n                                sx={{\n                                    p: 2,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    height: 360,\n                                }}\n                            >\n                                <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>{t(\"stats.platformsChart.title\")}</Typography>\n                                <ResponsiveContainer>\n                                    <RadarChart outerRadius={90} data={platformsData}>\n                                        <PolarGrid />\n                                        <PolarAngleAxis dataKey=\"key\" stroke={strokeColor} />\n                                        <Radar name={t(\"stats.platformsChart.total_available\")} dataKey=\"total_available\" stroke=\"#1fa134\" fill=\"#1fa134\" fillOpacity={0.6} />\n                                        <Radar name={t(\"stats.platformsChart.total_unavailable\")} dataKey=\"total_unavailable\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n                                        <Legend />\n                                    </RadarChart>\n                                </ResponsiveContainer>\n                            </Paper>\n                        </Grid>\n                    }\n                </Grid>\n            }\n        />\n    );\n\n};\n\nexport default StatsPage;"],"names":["CircularProgress","lazy","Fab","AutorenewIcon","CenteredGrid","props","loading","error","component","reloadFct","t","useTranslation","_jsxs","Suspense","fallback","children","_jsx","_Fragment","variant","size","color","onClick","calcDate","date1","calc","dt_date1","Date","dt_date2","date1_time_stamp","getTime","date2_time_stamp","calcFormat","getDate","getMonth","getFullYear","split","days_passed","Number","Math","abs","months_passed","years_passed","total_days","total_secs","total_mins","total_hours","total_weeks","result","count","join","round","trim","pretty_duration","contentDuration","hours","minutes","seconds","_props","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","selectStats","stats","currentColor","themeColor","useEffect","fetchStats","genresData","genres","map","s","_objectSpread","category","concat","key","platformsData","platforms","generalStats","general","strokeColor","ReloadWrapper","Grid","container","spacing","item","xs","md","lg","Paper","sx","p","display","flexDirection","Typography","gutterBottom","List","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","id","ListItemAvatar","Avatar","SportsEsportsIcon","ListItemText","primary","secondary","total","ListItem","total_available","total_unavailable","HourglassFullIcon","total_time","HourglassBottomIcon","total_time_available","HourglassTopIcon","total_time_unavailable","YouTubeIcon","channel_start_date","toLocaleDateString","value","length","height","ResponsiveContainer","BarChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","stroke","YAxis","Tooltip","contentStyle","backgroundColor","Bar","type","stackId","fill","name","RadarChart","outerRadius","PolarGrid","PolarAngleAxis","Radar","fillOpacity","Legend"],"sourceRoot":""}