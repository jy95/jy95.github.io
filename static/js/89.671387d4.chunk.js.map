{"version":3,"file":"static/js/89.671387d4.chunk.js","mappings":"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","sources":["components/GamesView/CardDialog.tsx"],"sourcesContent":["import { lazy } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\n// For full screen Dialog \nimport useMediaQuery from '@mui/material/useMediaQuery';\n\n// For snackbars\nimport { useSnackbar } from 'notistack';\nimport type { CardGame } from \"../../services/sharedDefintion\";\n\n// For Dialog\nconst Dialog = lazy(() => import(\"@mui/material/Dialog\"));\nconst DialogActions = lazy(() => import(\"@mui/material/DialogActions\"));\nconst DialogContent = lazy(() => import(\"@mui/material/DialogContent\"));\nconst DialogTitle = lazy(() => import(\"@mui/material/DialogTitle\"));\n\n// For a custom contextMenu (nice for UI)\nconst List = lazy(() => import(\"@mui/material/List\"));\nconst ListItem = lazy(() => import(\"@mui/material/ListItem\"));\nconst ListItemIcon = lazy(() => import(\"@mui/material/ListItemIcon\"));\nconst ListItemText = lazy(() => import(\"@mui/material/ListItemText\"));\nconst Button = lazy(() => import(\"@mui/material/Button\"));\n\n// Icons for contextMenu\nconst YouTubeIcon = lazy(() => import(\"@mui/icons-material/YouTube\"));\nconst PlayArrowIcon = lazy(() => import(\"@mui/icons-material/PlayArrow\"));\nconst FileCopyIcon = lazy(() => import(\"@mui/icons-material/FileCopy\"));\nconst RedditIcon = lazy(() => import(\"@mui/icons-material/Reddit\"));\nconst TwitterIcon = lazy(() => import(\"@mui/icons-material/Twitter\"));\nconst FacebookIcon = lazy(() => import(\"@mui/icons-material/Facebook\"));\n\nfunction CardDialog(props : {\n    game: CardGame;\n    contextMenuState : [boolean, (x: boolean) => void]\n}) {\n    \n    // hooks\n    const { t } = useTranslation('common');\n    const navigate = useNavigate();\n    const fullScreen = useMediaQuery( (theme : any) => theme.breakpoints.down('md'));\n    const { enqueueSnackbar } = useSnackbar();\n\n    // props\n    const {game, contextMenuState: [contextMenuOpen,setContextMenuOpen]} = props;\n    const {\n        title: gameTitle,\n        url: gameURL\n    } = game;\n    const local_path = game.url_type === \"PLAYLIST\" ? \"/playlist/\" + game.id : \"/video/\" + game.id;\n\n    // dialog options\n    const dialog_options : {\n        key: string,\n        icon: JSX.Element,\n        text: string,\n        onClick: () => void,\n        divider?: boolean\n    }[] = [\n        // Watch here\n        {\n            key: \"watchHere\",\n            icon: <PlayArrowIcon fontSize=\"small\"/>,\n            text: t(\"gamesLibrary.actionsButton.watchHere\", { \"gameName\": gameTitle}),\n            onClick: () => {\n                setContextMenuOpen(false);\n                navigate(local_path);\n            }\n        },\n        // watch on Youtube\n        {\n            key: \"watchOnYoutube\",\n            icon: <YouTubeIcon fontSize=\"small\"/>,\n            text: t(\"gamesLibrary.actionsButton.watchOnYt\", { \"gameName\": gameTitle}),\n            onClick: () => {\n                setContextMenuOpen(false);\n                window.location.href = gameURL;\n            }\n        },\n        // Copy link\n        {\n            key: \"copyLink\",\n            divider: true,\n            icon: <FileCopyIcon fontSize=\"small\"/>,\n            text: t(\"gamesLibrary.actionsButton.copyLink\"),\n            onClick: async () => {\n                if (navigator.clipboard !== undefined) {\n                    await navigator.clipboard.writeText(gameURL);\n                    enqueueSnackbar(\n                        t(\"gamesLibrary.snackbarsMessages.copiedLink\", { \"gameName\": gameTitle }),\n                        {\n                            \"variant\": \"success\",\n                            \"autoHideDuration\": 2500\n                        }\n                    )\n                    setContextMenuOpen(false);\n                }\n            }\n        },\n        // Share on Twitter\n        {\n            key: \"share-on-twitter\",\n            icon: <TwitterIcon fontSize=\"small\"/>,\n            text: t(\"gamesLibrary.actionsButton.shareOnTwitter\"),\n            onClick: () => {\n                window.open(\"https://twitter.com/intent/tweet?url=\" + encodeURIComponent(gameURL), \"_blank\");\n                setContextMenuOpen(false);\n            }\n        },\n        // Share on Facebook\n        {\n            key: \"share-on-facebook\",\n            icon: <FacebookIcon fontSize=\"small\"/>,\n            text: t(\"gamesLibrary.actionsButton.shareOnFacebook\"),\n            onClick: () => {\n                window.open(\"https://www.facebook.com/sharer/sharer.php?u=\" + encodeURIComponent(gameURL), \"_blank\")\n                setContextMenuOpen(false);\n            }\n        },\n        // Share on Reddit\n        {\n            key: \"share-on-reddit\",\n            icon: <RedditIcon fontSize=\"small\"/>,\n            text: t(\"gamesLibrary.actionsButton.shareOnReddit\"),\n            onClick: () => {\n                window.open(\"http://www.reddit.com/submit?title=\" + encodeURIComponent(gameTitle) + \"&url=\" + encodeURIComponent(gameURL) + \"&title=\",\"_blank\")\n                setContextMenuOpen(false);\n            }\n        }\n    ];\n\n    return (\n        <Dialog\n            fullScreen={fullScreen}\n            aria-labelledby=\"game-context-dialog-title\"\n            open={contextMenuOpen}\n            onClose={() => setContextMenuOpen(false)}\n        >\n            <DialogTitle id=\"game-context-dialog-title\">\n                {gameTitle}    \n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {\n                        dialog_options.map(option => \n                            <ListItem\n                                onClick={option.onClick}\n                                divider={option.divider || false}\n                                key={option.key}\n                            >\n                                <ListItemIcon>\n                                    {option.icon}\n                                </ListItemIcon>\n                                <ListItemText primary={option.text} />\n                            </ListItem>\n                        )  \n                    }\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={() => {setContextMenuOpen(false)}}>{t(\"gamesLibrary.actionsButton.closeContextMenu\")}</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nexport default CardDialog;"],"names":["Dialog","lazy","DialogActions","DialogContent","DialogTitle","List","ListItem","ListItemIcon","ListItemText","Button","YouTubeIcon","PlayArrowIcon","FileCopyIcon","RedditIcon","TwitterIcon","FacebookIcon","props","t","useTranslation","navigate","useNavigate","fullScreen","useMediaQuery","theme","breakpoints","down","enqueueSnackbar","useSnackbar","game","_props$contextMenuSta","_slicedToArray","contextMenuState","contextMenuOpen","setContextMenuOpen","gameTitle","title","gameURL","url","local_path","url_type","id","dialog_options","key","icon","_jsx","fontSize","text","onClick","window","location","href","divider","_onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","undefined","navigator","clipboard","writeText","stop","apply","arguments","open","encodeURIComponent","_jsxs","onClose","children","map","option","primary","autoFocus"],"sourceRoot":""}